####################
#   UAL SETTINGS   #
####################

# output
s3_output: False

# geographic settings
state_fips: 06
local_crs: EPSG:7131 

# skims
create_skims_from_beam: True
beam_skims_url: https://beam-outputs.s3.amazonaws.com/output/sfbay/sfbay-smartbaseline-full-TAZ-activitySimSkims-allTimePeriods-byR5-fixed__2021-02-20_11-57-40_dnv/ITERS/it.10/10.activitySimODSkims.UrbanSim.TAZ.Full.csv.gz

# urbansim data
create_inputs_from_usim_data: True
year: 2010
scenario: base
bucket_name: bayarea-activitysim
usim_data_store: model_data.h5
usim_zone_geoms: Transportation_Analysis_Zones.shp

#####################
#   ASIM SETTINGS   #
#####################

inherit_settings: True

# input tables 
input_table_list:
  - tablename: households
    filename: households.csv
    index_col: household_id
    rename_columns:
      HHID: household_id
      PERSONS: hhsize
      workers: num_workers
      VEHICL: auto_ownership
    keep_columns:
      - TAZ
      - income
      - hhsize
      - HHT
      - auto_ownership
      - num_workers
  - tablename: persons
    filename: persons.csv
    index_col: person_id
    rename_columns:
      PERID: person_id
    keep_columns:
      - household_id
      - age
      - PNUM
      - sex
      - pemploy
      - pstudent
      - ptype
  - tablename: land_use
    filename: land_use.csv
    index_col: taz1454
    rename_columns:
      taz1454: TAZ
      COUNTY: county_id
    keep_columns:
      - DISTRICT
      - SD
      - county_id
      - TOTHH
      - TOTPOP
      - TOTACRE
      - RESACRE
      - CIACRE
      - TOTEMP
      - AGE0519
      - RETEMPN
      - FPSEMPN
      - HEREMPN
      - OTHEMPN
      - AGREMPN
      - MWTEMPN
      - PRKCST
      - OPRKCST
      - area_type
      - HSENROLL
      - COLLFTE
      - COLLPTE
      - TOPOLOGY
      - TERMINAL

# input skims
skims_file: skims.omx

# raise error if any sub-process fails without waiting for others to complete
fail_fast: True

strict: False

mem_tick: 0

use_shadow_pricing: False

# sample size
households_sample_size: 100000

# multiprocessing controls
multiprocess: True
chunk_size: 4000000000
num_processes: 24
stagger: 0

# tracing
trace_hh_id: 
trace_od:

# to resume after last successful checkpoint, specify resume_after: _
# resume_after: _

models:
  ### mp_initialize step
  - initialize_landuse
  - compute_accessibility
  - initialize_households
  ### mp_households step
  - school_location
  - workplace_location
  - auto_ownership_simulate
  - free_parking
  - cdap_simulate
  - mandatory_tour_frequency
  - mandatory_tour_scheduling
  - joint_tour_frequency
  - joint_tour_composition
  - joint_tour_participation
  - joint_tour_destination
  - joint_tour_scheduling
  - non_mandatory_tour_frequency
  - non_mandatory_tour_destination
  - non_mandatory_tour_scheduling
  - tour_mode_choice_simulate
  - atwork_subtour_frequency
  - atwork_subtour_destination
  - atwork_subtour_scheduling
  - atwork_subtour_mode_choice
  - stop_frequency
  - trip_purpose
  - trip_destination
  - trip_purpose_and_destination
  - trip_scheduling
  - trip_mode_choice
  ### mp_summarize step
#   - generate_beam_plans
  - write_data_dictionary
  - write_tables
  - write_outputs_to_s3

multiprocess_steps:
  - name: mp_initialize
    begin: initialize_landuse
  - name: mp_households
    begin: school_location
    #num_processes: 9
    #stagger: 30
    #chunk_size: 1000000000
    slice:
      tables:
        - households
        - persons
  - name: mp_summarize
    begin: write_data_dictionary


output_tables:
  h5_store: True
  action: include
  prefix: final_
  tables:
    - checkpoints
    - land_use
    - households
    - persons
    - tours
    - trips
    - joint_tour_participants
    - plans

# area_types less than this are considered urban
urban_threshold: 4
cbd_threshold: 2
rural_threshold: 6

skim_time_periods:
    period_minutes: 60
    periods:
        - 0
        - 6
        - 11
        - 16
        - 20
        - 24
    labels:
        - EA
        - AM
        - MD
        - PM
        - EV

# - value of time

# value_of_time = lognormal(np.log(median_value_of_time * mu), sigma).clip(min_vot, max_vot)

min_value_of_time: 1
max_value_of_time: 50
distributed_vot_mu: 0.684
distributed_vot_sigma: 0.85

household_median_value_of_time:
  1: 6.01
  2: 8.81
  3: 10.44
  4: 12.86