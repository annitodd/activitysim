Expression,0,1,2,3
sov_available == False,0.0,0.0,0.0,0.0
auto_ownership == 0,1.0,1.0,1.0,1.0
age < 16,1.0,1.0,1.0,1.0
is_joint == True,0.0,0.0,0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV,0.0,0.0,0.0,0.0
@c_ivt*odt_skims['SOV_TIME'],-0.22798950970172882,-0.0009300000383518636,-0.22510650753974915,-0.00930000003427267
@c_walktimeshort * df.total_terminal_time,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['SOV_DIST'],-0.23737139518436226,-0.0006669464949809739,-0.24318613286618104,-0.00850187960207022
c_cost * total_parking_cost,-0.0,-2.878172506072677,-0.3629747063445922,-0.00320314308550762
@df.c_cost * odt_skims['SOV_BTOLL'],-0.0,-0.0,-0.0,-0.0
@c_age1619_da * ((df.age >= 16) & (df.age <= 19)),0.0,0.0,0.0,0.0
sovtoll_available == False,0.0,0.0,0.0,0.0
auto_ownership == 0 # (2),1.0,1.0,1.0,1.0
age < 16 # (2),1.0,1.0,1.0,1.0
is_joint == True # (2),0.0,0.0,0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV # (2),0.0,0.0,0.0,0.0
@c_ivt*odt_skims['SOVTOLL_TIME'],-0.22798950970172882,-0.0009300000383518636,-0.22510650753974915,-0.00930000003427267
@c_walktimeshort * df.total_terminal_time # (2),-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['SOVTOLL_DIST'],-0.23737139518436226,-0.0006669464949809739,-0.24318613286618104,-0.00850187960207022
c_cost * total_parking_cost # (2),-0.0,-2.878172506072677,-0.3629747063445922,-0.00320314308550762
@df.c_cost * odt_skims['SOVTOLL_BTOLL'],-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['SOVTOLL_VTOLL'],-0.009564175219031997,-3.884759112199618e-05,-0.00944808949571244,-0.0003894852458189449
@c_age1619_da * ((df.age >= 16) & (df.age <= 19)) # (2),0.0,0.0,0.0,0.0
hov2_available == False,0.0,0.0,0.0,0.0
is_joint & (number_of_participants > 2),0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV2_TIME'],-0.22798950970172882,-0.0009300000383518636,-0.22510650753974915,-0.00930000003427267
@c_walktimeshort * df.total_terminal_time # (3),-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV2_DIST'],-0.23737139518436226,-0.0006669464949809739,-0.24318613286618104,-0.00850187960207022
@df.c_cost * df.total_parking_cost / costShareSr2,-0.0,-1.644670003470101,-0.20741411791119554,-0.0018303674774329257
@df.c_cost * odt_skims['HOV2_BTOLL'] / costShareSr2,-0.0,-0.0,-0.0,-0.0
@c_hhsize1_sr * (df.hhsize == 1),-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2),0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16),0.0,0.0,0.0,0.0
hov2toll_available == False,0.0,0.0,0.0,0.0
is_joint & (number_of_participants > 2) # (2),0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV2TOLL_TIME'],-0.22798950970172882,-0.0009300000383518636,-0.22510650753974915,-0.00930000003427267
@c_walktimeshort * df.total_terminal_time # (4),-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV2TOLL_DIST'],-0.23737139518436226,-0.0006669464949809739,-0.24318613286618104,-0.00850187960207022
@df.c_cost * df.total_parking_cost / costShareSr2 # (2),-0.0,-1.644670003470101,-0.20741411791119554,-0.0018303674774329257
@df.c_cost * odt_skims['HOV2TOLL_BTOLL'] / costShareSr2,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] / costShareSr2,-0.005465242982303998,-2.2198623498283534e-05,-0.0053989082832642515,-0.00022256299761082567
@c_hhsize1_sr * (df.hhsize == 1) # (2),-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (2),0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16) # (2),0.0,0.0,0.0,0.0
hov3_available == False,0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV3_TIME'],-0.22798950970172882,-0.0009300000383518636,-0.22510650753974915,-0.00930000003427267
@c_walktimeshort * df.total_terminal_time # (5),-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV3_DIST'],-0.23737139518436226,-0.0006669464949809739,-0.24318613286618104,-0.00850187960207022
@df.c_cost *  df.total_parking_cost / costShareSr3,-0.0,-1.1512690024290708,-0.14518988253783688,-0.001281257234203048
@df.c_cost * odt_skims['HOV3_BTOLL'] / costShareSr3,-0.0,-0.0,-0.0,-0.0
@c_hhsize1_sr * (df.hhsize == 1) # (3),-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (3),0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16) # (3),0.0,0.0,0.0,0.0
hov3toll_available == False,0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV3TOLL_TIME'],-0.22798950970172882,-0.0009300000383518636,-0.22510650753974915,-0.00930000003427267
@c_walktimeshort * df.total_terminal_time # (6),-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV3TOLL_DIST'],-0.23737139518436226,-0.0006669464949809739,-0.24318613286618104,-0.00850187960207022
@df.c_cost * df.total_parking_cost / costShareSr3,-0.0,-1.1512690024290708,-0.14518988253783688,-0.001281257234203048
@df.c_cost * odt_skims['HOV3TOLL_BTOLL'] / costShareSr3,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['HOV3TOLL_VTOLL'] / costShareSr3,-0.0038256700876127987,-1.5539036448798472e-05,-0.003779235798284976,-0.00015579409832757797
@c_hhsize1_sr * (df.hhsize == 1) # (4),-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (4),0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16) # (4),0.0,0.0,0.0,0.0
@c_walktimeshort * od_skims['DISTWALK'].clip(upper=walkThresh) * 60/walkSpeed,-1.1159999370574951,-0.014040282927453518,-1.1159999370574951,-0.17897804081439972
@c_walktimelong * (od_skims['DISTWALK'] - walkThresh).clip(lower=0) * 60/walkSpeed,-17.608671188354492,-0.0,-20.160999298095703,-0.0
@c_density_index * df.density_index,0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_walk * df.trip_topology,-0.41850000000000004,-0.41850000000000004,-0.41850000000000004,-0.41850000000000004
is_atwork_subtour & ~work_tour_is_bike,0.0,0.0,0.0,0.0
@c_biketimeshort * od_skims['DISTBIKE'].clip(upper=bikeThresh)*60/bikeSpeed,-2.3188672065734863,-0.007020141463726759,-2.574099540710449,-0.08948902040719986
@c_biketimelong * (od_skims['DISTBIKE']-bikeThresh).clip(lower=0)*60/bikeSpeed,-0.0,-0.0,-0.0,-0.0
@c_density_index*df.density_index,0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_bike * df.trip_topology,-0.558,-0.558,-0.558,-0.558
walk_local_available == False,0.0,1.0,0.0,1.0
@c_ivt * odt_skims['WLK_LOC_WLK_TOTIVT']/100,-0.9207000136375427,-0.0,-0.3329399824142456,-0.0
@c_short_i_wait * (odt_skims['WLK_LOC_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_LOC_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_LOC_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_LOC_WLK_BOARDS']-1).clip(0),-0.13950000703334808,-0.0,-0.13950000703334808,-0.0
@c_wacc * df.origin_walk_time,-0.371628,-0.371628,-0.371628,-0.371628
@c_wegr * df.destination_walk_time,-0.371628,-0.371628,-0.371628,-0.371628
@c_waux * odt_skims['WLK_LOC_WLK_WAUX']/100,-0.14508000016212463,-0.0,-0.05486999824643135,-0.0
@df.c_cost * odt_skims['WLK_LOC_WLK_FAR'],-0.06559491705068904,-0.0,-0.06899226643566225,-0.0
@c_density_index * df.density_index # (2),0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_trn * df.trip_topology,-0.06138000000000001,-0.06138000000000001,-0.06138000000000001,-0.06138000000000001
@c_age010_trn * (df.age <= 10),0.0,0.0,0.0,0.0
walk_lrf_available == False,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_LRF_WLK_TOTIVT']/100,-0.9207000136375427,-0.0,-0.3329399824142456,-0.0
@(c_ivt_lrt-c_ivt) * odt_skims['WLK_LRF_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0
@(c_ivt_ferry-c_ivt_lrt) * odt_skims['WLK_LRF_WLK_FERRYIVT']/100,0.0,0.0,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_LRF_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_LRF_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_LRF_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_LRF_WLK_BOARDS']-1).clip(0),-0.13950000703334808,-0.0,-0.13950000703334808,-0.0
@c_wacc * df.origin_walk_time # (2),-0.371628,-0.371628,-0.371628,-0.371628
@c_wegr * df.destination_walk_time # (2),-0.371628,-0.371628,-0.371628,-0.371628
@c_waux * odt_skims['WLK_LRF_WLK_WAUX']/100,-0.14508000016212463,-0.0,-0.05486999824643135,-0.0
@df.c_cost * odt_skims['WLK_LRF_WLK_FAR'],-0.06559491705068904,-0.0,-0.06899226643566225,-0.0
@c_density_index * df.density_index # (3),0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_trn * df.trip_topology # (2),-0.06138000000000001,-0.06138000000000001,-0.06138000000000001,-0.06138000000000001
@c_age010_trn * (df.age <= 10) # (2),0.0,0.0,0.0,0.0
walk_express_available == False,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_EXP_WLK_TOTIVT']/100,-0.9207000136375427,-0.0,-0.3329399824142456,-0.0
@(c_ivt_exp-c_ivt) * odt_skims['WLK_EXP_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_EXP_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_EXP_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_EXP_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_EXP_WLK_BOARDS']-1).clip(0),-0.13950000703334808,-0.0,-0.13950000703334808,-0.0
@c_wacc * df.origin_walk_time # (3),-0.371628,-0.371628,-0.371628,-0.371628
@c_wegr * df.destination_walk_time # (3),-0.371628,-0.371628,-0.371628,-0.371628
@c_waux * odt_skims['WLK_EXP_WLK_WAUX']/100,-0.14508000016212463,-0.0,-0.05486999824643135,-0.0
@df.c_cost * odt_skims['WLK_EXP_WLK_FAR'],-0.06559491705068904,-0.0,-0.06899226643566225,-0.0
@c_density_index * df.density_index # (4),0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_trn * df.trip_topology # (3),-0.06138000000000001,-0.06138000000000001,-0.06138000000000001,-0.06138000000000001
@c_age010_trn * (df.age <= 10) # (3),0.0,0.0,0.0,0.0
walk_heavyrail_available == False,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_HVY_WLK_TOTIVT']/100,-0.9207000136375427,-0.0,-0.3329399824142456,-0.0
@(c_ivt_hvy-c_ivt) * odt_skims['WLK_HVY_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_HVY_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_HVY_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_HVY_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_HVY_WLK_BOARDS']-1).clip(0),-0.13950000703334808,-0.0,-0.13950000703334808,-0.0
@c_wacc * df.origin_walk_time # (4),-0.371628,-0.371628,-0.371628,-0.371628
@c_wegr * df.destination_walk_time # (4),-0.371628,-0.371628,-0.371628,-0.371628
@c_waux * odt_skims['WLK_HVY_WLK_WAUX']/100,-0.14508000016212463,-0.0,-0.05486999824643135,-0.0
@df.c_cost * odt_skims['WLK_HVY_WLK_FAR'],-0.06559491705068904,-0.0,-0.06899226643566225,-0.0
@c_density_index * df.density_index # (5),0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_trn * df.trip_topology # (4),-0.06138000000000001,-0.06138000000000001,-0.06138000000000001,-0.06138000000000001
@c_age010_trn * (df.age <= 10) # (4),0.0,0.0,0.0,0.0
walk_commuter_available == False,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_COM_WLK_TOTIVT']/100,-0.9207000136375427,-0.0,-0.3329399824142456,-0.0
@(c_ivt_com-c_ivt) * odt_skims['WLK_COM_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_COM_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_COM_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_COM_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_COM_WLK_BOARDS']-1).clip(0),-0.13950000703334808,-0.0,-0.13950000703334808,-0.0
@c_wacc * df.origin_walk_time # (5),-0.371628,-0.371628,-0.371628,-0.371628
@c_wegr * df.destination_walk_time # (5),-0.371628,-0.371628,-0.371628,-0.371628
@c_waux * odt_skims['WLK_COM_WLK_WAUX']/100,-0.14508000016212463,-0.0,-0.05486999824643135,-0.0
@df.c_cost * odt_skims['WLK_COM_WLK_FAR'],-0.06559491705068904,-0.0,-0.06899226643566225,-0.0
@c_density_index * df.density_index # (6),0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_trn * df.trip_topology # (5),-0.06138000000000001,-0.06138000000000001,-0.06138000000000001,-0.06138000000000001
@c_age010_trn * (df.age < 10),0.0,0.0,0.0,0.0
auto_ownership == 0 # (3),1.0,1.0,1.0,1.0
age < 16 # (3),1.0,1.0,1.0,1.0
@c_density_index * df.density_index # (7),0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_trn * df.trip_topology # (6),-0.06138000000000001,-0.06138000000000001,-0.06138000000000001,-0.06138000000000001
@c_age010_trn * (df.age < 10) # (2),0.0,0.0,0.0,0.0
outbound & ~drive_local_available_outbound,1.0,0.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_LOC_WLK_TOTIVT']/100,-0.9207000000000001,-0.0,-0.0,-0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_LOC_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_LOC_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_LOC_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_wlk * (odt_skims['DRV_LOC_WLK_BOARDS']-1).clip(0),-0.1395,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_LOC_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time,-0.371628,-0.0,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_LOC_WLK_WAUX']/100,-0.14508000000000001,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_LOC_WLK_FAR'] + costPerMile*odt_skims['DRV_LOC_WLK_DDIST']/100),-0.06559491705068904,-0.0,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_LOC_WLK_DDIST']/100)/ (od_skims['DIST']),0.0,0.0,0.0,0.0
inbound & ~drive_local_available_inbound,0.0,1.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_LOC_DRV_TOTIVT']/100,-0.0,-0.0,-0.3329400113525391,-0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_LOC_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_LOC_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_LOC_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_wlk * (odt_skims['WLK_LOC_DRV_BOARDS']-1).clip(0),-0.0,-0.0,-0.1395,-0.0
@df.inbound * c_dtim * odt_skims['WLK_LOC_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time,-0.0,-0.371628,-0.371628,-0.371628
@df.inbound * c_waux * odt_skims['WLK_LOC_DRV_WAUX']/100,-0.0,-0.0,-0.05487000141906739,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_LOC_DRV_FAR'] + costPerMile*odt_skims['WLK_LOC_DRV_DDIST']/100),-0.0,-0.0,-0.06899226643566225,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['WLK_LOC_DRV_DDIST']/100)/ (od_skims['DIST']),0.0,0.0,0.0,0.0
auto_ownership == 0 # (4),1.0,1.0,1.0,1.0
age < 16 # (4),1.0,1.0,1.0,1.0
@c_density_index * df.density_index # (8),0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_trn * df.trip_topology # (7),-0.06138000000000001,-0.06138000000000001,-0.06138000000000001,-0.06138000000000001
@c_age010_trn * (df.age < 10) # (3),0.0,0.0,0.0,0.0
outbound & ~drive_lrf_available_outbound,1.0,0.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_LRF_WLK_TOTIVT']/100,-0.9207000000000001,-0.0,-0.0,-0.0
@df.outbound * (c_ivt_lrt-c_ivt)*odt_skims['DRV_LRF_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0
@df.outbound * (c_ivt_ferry-c_ivt_lrt)*odt_skims['DRV_LRF_WLK_FERRYIVT']/100,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_LRF_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_LRF_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_LRF_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_LRF_WLK_BOARDS']-1).clip(0),-0.41850000000000004,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_LRF_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (2),-0.371628,-0.0,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_LRF_WLK_WAUX']/100,-0.14508000000000001,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_LRF_WLK_FAR'] + costPerMile * odt_skims['DRV_LRF_WLK_DDIST']/100),-0.06559491705068904,-0.0,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_LRF_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0
inbound & ~drive_lrf_available_inbound,0.0,1.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_LRF_DRV_TOTIVT']/100,-0.0,-0.0,-0.3329400113525391,-0.0
@df.inbound * (c_ivt_lrt-c_ivt)*odt_skims['WLK_LRF_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0
@df.inbound * (c_ivt_ferry-c_ivt_lrt)*odt_skims['WLK_LRF_DRV_FERRYIVT']/100,0.0,0.0,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_LRF_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_LRF_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_LRF_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_LRF_DRV_BOARDS']-1).clip(0),-0.0,-0.0,-0.41850000000000004,-0.0
@df.inbound * c_dtim * odt_skims['WLK_LRF_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (2),-0.0,-0.371628,-0.371628,-0.371628
@df.inbound * c_waux * odt_skims['WLK_LRF_DRV_WAUX']/100,-0.0,-0.0,-0.05487000141906739,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_LRF_DRV_FAR'] + costPerMile * odt_skims['WLK_LRF_DRV_DDIST']/100),-0.0,-0.0,-0.06899226643566225,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_LRF_DRV_DDIST']/100)/ od_skims['DIST'],0.0,0.0,0.0,0.0
auto_ownership == 0 # (5),1.0,1.0,1.0,1.0
age < 16 # (5),1.0,1.0,1.0,1.0
@c_density_index * df.density_index # (9),0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_trn * df.trip_topology # (8),-0.06138000000000001,-0.06138000000000001,-0.06138000000000001,-0.06138000000000001
@c_age010_trn * (df.age < 10) # (4),0.0,0.0,0.0,0.0
outbound & ~drive_express_available_outbound,1.0,0.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_EXP_WLK_TOTIVT']/100,-0.9207000000000001,-0.0,-0.0,-0.0
@df.outbound * (c_ivt_exp-c_ivt) * odt_skims['DRV_EXP_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_EXP_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_EXP_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_EXP_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_EXP_WLK_BOARDS']-1).clip(0),-0.41850000000000004,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_EXP_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (3),-0.371628,-0.0,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_EXP_WLK_WAUX']/100,-0.14508000000000001,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_EXP_WLK_FAR'] + costPerMile * odt_skims['DRV_EXP_WLK_DDIST']/100),-0.06559491705068904,-0.0,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_EXP_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0
inbound & ~drive_express_available_inbound,0.0,1.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_EXP_DRV_TOTIVT']/100,-0.0,-0.0,-0.3329400113525391,-0.0
@df.inbound * (c_ivt_exp-c_ivt) * odt_skims['WLK_EXP_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_EXP_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_EXP_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_EXP_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_EXP_DRV_BOARDS']-1).clip(0),-0.0,-0.0,-0.41850000000000004,-0.0
@df.inbound * c_dtim * odt_skims['WLK_EXP_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (3),-0.0,-0.371628,-0.371628,-0.371628
@df.inbound * c_waux * odt_skims['WLK_EXP_DRV_WAUX']/100,-0.0,-0.0,-0.05487000141906739,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_EXP_DRV_FAR'] + costPerMile * odt_skims['WLK_EXP_DRV_DDIST']/100),-0.0,-0.0,-0.06899226643566225,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_EXP_DRV_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0
auto_ownership == 0 # (6),1.0,1.0,1.0,1.0
age < 16 # (6),1.0,1.0,1.0,1.0
@c_density_index * df.density_index # (10),0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_trn * df.trip_topology # (9),-0.06138000000000001,-0.06138000000000001,-0.06138000000000001,-0.06138000000000001
@c_age010_trn * (df.age < 10) # (5),0.0,0.0,0.0,0.0
outbound & ~drive_heavyrail_available_outbound,1.0,0.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_HVY_WLK_TOTIVT']/100,-0.9207000000000001,-0.0,-0.0,-0.0
@df.outbound * (c_ivt_hvy-c_ivt) * odt_skims['DRV_HVY_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_HVY_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_HVY_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_HVY_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_HVY_WLK_BOARDS']-1).clip(0),-0.41850000000000004,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_HVY_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (4),-0.371628,-0.0,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_HVY_WLK_WAUX']/100,-0.14508000000000001,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_HVY_WLK_FAR'] + costPerMile * odt_skims['DRV_HVY_WLK_DDIST']/100),-0.06559491705068904,-0.0,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_HVY_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0
inbound & ~drive_heavyrail_available_inbound,0.0,1.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_HVY_DRV_TOTIVT']/100,-0.0,-0.0,-0.3329400113525391,-0.0
@df.inbound * (c_ivt_hvy-c_ivt) * odt_skims['WLK_HVY_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_HVY_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_HVY_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_HVY_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_HVY_DRV_BOARDS']-1).clip(0),-0.0,-0.0,-0.41850000000000004,-0.0
@df.outbound * c_dtim * odt_skims['DRV_HVY_WLK_DTIM']/100 # (2),-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (4),-0.0,-0.371628,-0.371628,-0.371628
@c_waux * odt_skims['WLK_HVY_DRV_WAUX']/100,-0.14508000016212463,-0.0,-0.05486999824643135,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_HVY_DRV_FAR'] + costPerMile * odt_skims['WLK_HVY_DRV_DDIST']/100),-0.0,-0.0,-0.06899226643566225,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_HVY_DRV_DDIST']/100)/ od_skims['DIST'],0.0,0.0,0.0,0.0
auto_ownership == 0 # (7),1.0,1.0,1.0,1.0
age < 16 # (7),1.0,1.0,1.0,1.0
@c_density_index * df.density_index # (11),0.15820351510075026,0.15820351510075026,0.15820351510075026,0.0038284727242002205
@c_topology_trn * df.trip_topology # (10),-0.06138000000000001,-0.06138000000000001,-0.06138000000000001,-0.06138000000000001
@c_age010_trn * (df.age < 10) # (6),0.0,0.0,0.0,0.0
outbound & ~drive_commuter_available_outbound,1.0,0.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_COM_WLK_TOTIVT']/100,-0.9207000000000001,-0.0,-0.0,-0.0
@df.outbound * (c_ivt_com-c_ivt) * odt_skims['DRV_COM_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_COM_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_COM_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_COM_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_COM_WLK_BOARDS']-1).clip(0),-0.41850000000000004,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_COM_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (5),-0.371628,-0.0,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_COM_WLK_WAUX']/100,-0.14508000000000001,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_COM_WLK_FAR'] + costPerMile * odt_skims['DRV_COM_WLK_DDIST']/100),-0.06559491705068904,-0.0,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_COM_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0
inbound & ~drive_commuter_available_inbound,0.0,1.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_COM_DRV_TOTIVT']/100,-0.0,-0.0,-0.3329400113525391,-0.0
@df.inbound * (c_ivt_com-c_ivt) * odt_skims['WLK_COM_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_COM_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_COM_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_COM_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_COM_DRV_BOARDS']-1).clip(0),-0.0,-0.0,-0.41850000000000004,-0.0
@df.inbound * c_dtim * odt_skims['WLK_COM_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (5),-0.0,-0.371628,-0.371628,-0.371628
@df.inbound * c_waux * odt_skims['WLK_COM_DRV_WAUX']/100,-0.0,-0.0,-0.05487000141906739,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_COM_DRV_FAR'] + costPerMile * odt_skims['WLK_COM_DRV_DDIST']/100),-0.0,-0.0,-0.06899226643566225,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_COM_DRV_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV2TOLL_TIME'] # (2),-0.22798950970172882,-0.0009300000383518636,-0.22510650753974915,-0.00930000003427267
@c_ivt * 1.5 * df.origTaxiWaitTime,-0.230175,-0.230175,-0.230175,-0.5566050000000001
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'],-0.009564175219031997,-3.884759112199618e-05,-0.00944808949571244,-0.0003894852458189449
@df.c_cost * odt_skims['HOV2TOLL_BTOLL'],-0.0,-0.0,-0.0,-0.0
@df.c_cost * (Taxi_baseFare + odt_skims['HOV2TOLL_DIST'] * Taxi_costPerMile + odt_skims['HOV2TOLL_TIME'] * Taxi_costPerMinute)*100,-3.859497522395223,-0.6470118841770398,-3.929623841848038,-0.7542328946113366
@c_ivt * odt_skims['HOV2TOLL_TIME'] ,-0.22798950970172882,-0.0009300000383518636,-0.22510650753974915,-0.00930000003427267
@c_ivt * 1.5 * df.origSingleTNCWaitTime,-0.12555000000000002,-0.12555000000000002,-0.12555000000000002,-0.35154
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] # (2),-0.009564175219031997,-3.884759112199618e-05,-0.00944808949571244,-0.0003894852458189449
@df.c_cost * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']),-0.0,-0.0,-0.0,-0.0
"@df.c_cost * np.maximum(TNC_single_baseFare + odt_skims['HOV2TOLL_DIST'] * TNC_single_costPerMile + odt_skims['HOV2TOLL_TIME'] * TNC_single_costPerMinute, TNC_single_costMinimum) * 100",-2.9322040513611594,-2.086883053051215,-2.9672991373219992,-2.086883053051215
@c_ivt * odt_skims['HOV2TOLL_TIME'] * TNC_shared_IVTFactor,-0.34198427200317383,-0.001395000028423965,-0.3376597762107849,-0.013949999585747719
@c_ivt  * 1.5 * df.origSharedTNCWaitTime,-0.20924999999999996,-0.20924999999999996,-0.20924999999999996,-0.46035000000000004
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] # (3),-0.009564175219031997,-3.884759112199618e-05,-0.00944808949571244,-0.0003894852458189449
@df.c_cost * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']) # (2),-0.0,-0.0,-0.0,-0.0
"@df.c_cost * np.maximum(TNC_shared_baseFare + odt_skims['HOV2TOLL_DIST'] * TNC_shared_costPerMile + odt_skims['HOV2TOLL_TIME']* TNC_shared_costPerMinute, TNC_shared_costMinimum) * 100",-1.5623553380212893,-0.8695346284728073,-1.5762098034680792,-0.8695346284728073
tour_mode_is_auto,0.0,0.0,0.0,0.0
tour_mode_is_walk,0.0,0.0,0.0,0.0
tour_mode_is_bike,0.0,0.0,0.0,0.0
tour_mode_is_walk_transit,1.0,1.0,1.0,1.0
tour_mode_is_drive_transit,0.0,0.0,0.0,0.0
tour_mode_is_ride_hail,0.0,0.0,0.0,0.0
@sov_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0,0.0,0.0
@sov_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0,0.0,0.0
@sov_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),-0.0,-0.0,-0.0,-0.0
@sov_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0,0.0,0.0
@sr2_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),0.0,0.0,0.0,0.0
@sr2_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),0.0,0.0,0.0,0.0
@sr2_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-0.0,-0.0,-0.0,-0.0
@sr2_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-0.0,-0.0,-0.0,-0.0
@sr3p_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0,-0.0,-0.0
@sr3p_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),0.0,0.0,0.0,0.0
@sr3p_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0,-0.0,-0.0
@sr3p_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0,-0.0,-0.0
@walk_ASC_rh * df.is_indiv * (df.i_tour_mode == I_WALK_MODE),-0.0,-0.0,-0.0,-0.0
@bike_ASC_walk * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0,-0.0,-0.0
@bike_ASC_rh * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0,-0.0,-0.0
@walk_transit_ASC_lightrail * (df.is_indiv & df.tour_mode_is_walk_transit & ~df.walk_ferry_available),0.5392,0.5392,0.5392,0.5392
@walk_transit_ASC_ferry * (df.is_indiv & df.tour_mode_is_walk_transit & df.walk_ferry_available),0.0,0.0,0.0,0.0
@walk_transit_ASC_express * (df.is_indiv & df.tour_mode_is_walk_transit),0.6648,0.6648,0.6648,0.6648
@walk_transit_ASC_heavyrail * (df.is_indiv & df.tour_mode_is_walk_transit),0.5403,0.5403,0.5403,0.5403
@walk_transit_ASC_commuter * (df.is_indiv & df.tour_mode_is_walk_transit),0.5129,0.5129,0.5129,0.5129
@walk_transit_ASC_sr2 * (df.is_indiv & df.tour_mode_is_walk_transit),-3.1434,-3.1434,-3.1434,-3.1434
@walk_transit_ASC_sr3p * (df.is_indiv & df.tour_mode_is_walk_transit),-3.852,-3.852,-3.852,-3.852
@walk_transit_ASC_walk * (df.is_indiv & df.tour_mode_is_walk_transit),1.3504,1.3504,1.3504,1.3504
@walk_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_walk_transit),-4.7508,-4.7508,-4.7508,-4.7508
@drive_transit_ASC_lightrail * (df.is_indiv & df.tour_mode_is_drive_transit & ~df.drive_ferry_available),0.0,0.0,0.0,0.0
@drive_transit_ASC_ferry * (df.is_indiv & df.tour_mode_is_drive_transit & df.drive_ferry_available),0.0,0.0,0.0,0.0
@drive_transit_ASC_express * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0
@drive_transit_ASC_heavyrail * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0
@drive_transit_ASC_commuter * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0
@drive_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_drive_transit),-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_sr2 * (df.is_indiv & df.tour_mode_is_ride_hail),-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_sr3p * (df.is_indiv & df.tour_mode_is_ride_hail),-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_walk * (df.is_indiv & df.tour_mode_is_ride_hail),-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_walk_transit * (df.is_indiv & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0
@ride_hail_ASC_taxi * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_tnc_single * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0
@ride_hail_ASC_tnc_shared * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0
@joint_auto_ASC_sr2 * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),-0.0,-0.0,-0.0,-0.0
@joint_auto_ASC_sr3p * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),-0.0,-0.0,-0.0,-0.0
@joint_auto_ASC_walk * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),-0.0,-0.0,-0.0,-0.0
@joint_auto_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),-0.0,-0.0,-0.0,-0.0
@joint_walk_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),-0.0,-0.0,-0.0,-0.0
@joint_bike_ASC_walk * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0,-0.0,-0.0
@joint_bike_ASC_rh * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0,-0.0,-0.0
@joint_walk_transit_ASC_lightrail * (df.is_joint & df.tour_mode_is_walk_transit & ~df.walk_ferry_available),0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_ferry * (df.is_joint & df.tour_mode_is_walk_transit & df.walk_ferry_available),0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_express * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_heavyrail * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_commuter * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_sr2 * (df.is_joint & df.tour_mode_is_walk_transit),-0.0,-0.0,-0.0,-0.0
@joint_walk_transit_ASC_sr3p * (df.is_joint & df.tour_mode_is_walk_transit),-0.0,-0.0,-0.0,-0.0
@joint_walk_transit_ASC_walk * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_rh * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_lightrail * (df.is_joint & df.tour_mode_is_drive_transit & ~df.drive_ferry_available),0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_ferry * (df.is_joint & df.tour_mode_is_drive_transit & df.drive_ferry_available),0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_express * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_heavyrail * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_commuter * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_rh * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_sr2 * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_sr3p * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_walk * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_walk_transit * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_taxi * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_tnc_single * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),-0.0,-0.0,-0.0,-0.0
@joint_ride_hail_ASC_tnc_shared * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0
@df.tour_mode_is_walk & (od_skims['DISTWALK'] > 3),0.0,0.0,0.0,0.0
@df.tour_mode_is_walk & (od_skims['DISTBIKE'] > 8),0.0,0.0,0.0,0.0
@(c_origin_density_index*df.origin_density_index).clip(c_origin_density_index_max) if origin_density_applied else 0,0.41850000000000004,0.4746105453022507,0.41850000000000004,0.41850000000000004
@c_walk_express_penalty * ~(df.first_trip | df.first_trip),-0.0,-0.0,-0.279,-0.279
@adjust_tnc_shared,-0.8370000000000001,-0.8370000000000001,-0.8370000000000001,-0.8370000000000001
sov_available == False,0.0,0.0
auto_ownership == 0,1.0,1.0
age < 16,1.0,1.0
is_joint == True,0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV,0.0,0.0
@c_ivt*odt_skims['SOV_TIME'],-0.04103749990463257,-0.045791663229465485
@c_walktimeshort * df.total_terminal_time,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['SOV_DIST'],-0.05539691733660208,-0.059475062458690935
c_cost * total_parking_cost,-0.0,-0.01785399892721871
@df.c_cost * odt_skims['SOV_BTOLL'],-0.0,-0.0
@c_age1619_da * ((df.age >= 16) & (df.age <= 19)),0.0,0.0
sovtoll_available == False,0.0,0.0
auto_ownership == 0 # (2),1.0,1.0
age < 16 # (2),1.0,1.0
is_joint == True # (2),0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV # (2),0.0,0.0
@c_ivt*odt_skims['SOVTOLL_TIME'],-0.04103749990463257,-0.045791663229465485
@c_walktimeshort * df.total_terminal_time # (2),-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['SOVTOLL_DIST'],-0.05539691733660208,-0.059475062458690935
c_cost * total_parking_cost # (2),-0.0,-0.01785399892721871
@df.c_cost * odt_skims['SOVTOLL_BTOLL'],-0.0,-0.0
@df.c_cost * odt_skims['SOVTOLL_VTOLL'],-0.0017285052566223418,-0.0019274627478989624
@c_age1619_da * ((df.age >= 16) & (df.age <= 19)) # (2),0.0,0.0
hov2_available == False,0.0,0.0
is_joint & (number_of_participants > 2),0.0,0.0
@c_ivt * odt_skims['HOV2_TIME'],-0.04103749990463257,-0.045791663229465485
@c_walktimeshort * df.total_terminal_time # (3),-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV2_DIST'],-0.05539691733660208,-0.059475062458690935
@df.c_cost * df.total_parking_cost / costShareSr2,-0.0,-0.010202285101267835
@df.c_cost * odt_skims['HOV2_BTOLL'] / costShareSr2,-0.0,-0.0
@c_hhsize1_sr * (df.hhsize == 1),-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2),0.0,0.0
@c_age16p_sr * (df.age >= 16),0.0,0.0
hov2toll_available == False,0.0,0.0
is_joint & (number_of_participants > 2) # (2),0.0,0.0
@c_ivt * odt_skims['HOV2TOLL_TIME'],-0.04103749990463257,-0.045791663229465485
@c_walktimeshort * df.total_terminal_time # (4),-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV2TOLL_DIST'],-0.05539691733660208,-0.059475062458690935
@df.c_cost * df.total_parking_cost / costShareSr2 # (2),-0.0,-0.010202285101267835
@df.c_cost * odt_skims['HOV2TOLL_BTOLL'] / costShareSr2,-0.0,-0.0
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] / costShareSr2,-0.0009877172894984811,-0.0011014072845136928
@c_hhsize1_sr * (df.hhsize == 1) # (2),-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (2),0.0,0.0
@c_age16p_sr * (df.age >= 16) # (2),0.0,0.0
hov3_available == False,0.0,0.0
@c_ivt * odt_skims['HOV3_TIME'],-0.04103749990463257,-0.045791663229465485
@c_walktimeshort * df.total_terminal_time # (5),-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV3_DIST'],-0.05539691733660208,-0.059475062458690935
@df.c_cost *  df.total_parking_cost / costShareSr3,-0.0,-0.007141599570887484
@df.c_cost * odt_skims['HOV3_BTOLL'] / costShareSr3,-0.0,-0.0
@c_hhsize1_sr * (df.hhsize == 1) # (3),-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (3),0.0,0.0
@c_age16p_sr * (df.age >= 16) # (3),0.0,0.0
hov3toll_available == False,0.0,0.0
@c_ivt * odt_skims['HOV3TOLL_TIME'],-0.04103749990463257,-0.045791663229465485
@c_walktimeshort * df.total_terminal_time # (6),-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV3TOLL_DIST'],-0.05539691733660208,-0.059475062458690935
@df.c_cost * df.total_parking_cost / costShareSr3,-0.0,-0.007141599570887484
@df.c_cost * odt_skims['HOV3TOLL_BTOLL'] / costShareSr3,-0.0,-0.0
@df.c_cost * odt_skims['HOV3TOLL_VTOLL'] / costShareSr3,-0.0006914021026489367,-0.0007709850991595849
@c_hhsize1_sr * (df.hhsize == 1) # (4),-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (4),0.0,0.0
@c_age16p_sr * (df.age >= 16) # (4),0.0,0.0
@c_walktimeshort * od_skims['DISTWALK'].clip(upper=walkThresh) * 60/walkSpeed,-0.699999988079071,-0.699999988079071
@c_walktimelong * (od_skims['DISTWALK'] - walkThresh).clip(lower=0) * 60/walkSpeed,-2.388279676437378,-2.7602224349975586
@c_density_index * df.density_index,0.005513677669430349,0.005513677669430349
@c_topology_walk * df.trip_topology,-0.2625,-0.2625
is_atwork_subtour & ~work_tour_is_bike,0.0,0.0
@c_biketimeshort * od_skims['DISTBIKE'].clip(upper=bikeThresh)*60/bikeSpeed,-0.5888280272483826,-0.6260222792625427
@c_biketimelong * (od_skims['DISTBIKE']-bikeThresh).clip(lower=0)*60/bikeSpeed,-0.0,-0.0
@c_density_index*df.density_index,0.005513677669430349,0.005513677669430349
@c_topology_bike * df.trip_topology,-0.35000000000000003,-0.35000000000000003
walk_local_available == False,0.0,0.0
@c_ivt * odt_skims['WLK_LOC_WLK_TOTIVT']/100,-0.11899999529123306,-0.14000000059604645
@c_short_i_wait * (odt_skims['WLK_LOC_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_LOC_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@c_xwait * odt_skims['WLK_LOC_WLK_XWAIT']/100,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_LOC_WLK_BOARDS']-1).clip(0),-0.0,-0.0
@c_wacc * df.origin_walk_time,-0.23310000000000003,-0.23310000000000003
@c_wegr * df.destination_walk_time,-0.23310000000000003,-0.23310000000000003
@c_waux * odt_skims['WLK_LOC_WLK_WAUX']/100,-0.0,-0.0
@df.c_cost * odt_skims['WLK_LOC_WLK_FAR'],-0.02348634520238116,-0.017633281978008238
@c_density_index * df.density_index # (2),0.005513677669430349,0.005513677669430349
@c_topology_trn * df.trip_topology,-0.038500000000000006,-0.038500000000000006
@c_age010_trn * (df.age <= 10),0.0,0.0
walk_lrf_available == False,1.0,1.0
@c_ivt * odt_skims['WLK_LRF_WLK_TOTIVT']/100,-0.11899999529123306,-0.14000000059604645
@(c_ivt_lrt-c_ivt) * odt_skims['WLK_LRF_WLK_KEYIVT']/100,0.0,0.0
@(c_ivt_ferry-c_ivt_lrt) * odt_skims['WLK_LRF_WLK_FERRYIVT']/100,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_LRF_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_LRF_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@c_xwait * odt_skims['WLK_LRF_WLK_XWAIT']/100,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_LRF_WLK_BOARDS']-1).clip(0),-0.0,-0.0
@c_wacc * df.origin_walk_time # (2),-0.23310000000000003,-0.23310000000000003
@c_wegr * df.destination_walk_time # (2),-0.23310000000000003,-0.23310000000000003
@c_waux * odt_skims['WLK_LRF_WLK_WAUX']/100,-0.0,-0.0
@df.c_cost * odt_skims['WLK_LRF_WLK_FAR'],-0.02348634520238116,-0.017633281978008238
@c_density_index * df.density_index # (3),0.005513677669430349,0.005513677669430349
@c_topology_trn * df.trip_topology # (2),-0.038500000000000006,-0.038500000000000006
@c_age010_trn * (df.age <= 10) # (2),0.0,0.0
walk_express_available == False,1.0,1.0
@c_ivt * odt_skims['WLK_EXP_WLK_TOTIVT']/100,-0.11899999529123306,-0.14000000059604645
@(c_ivt_exp-c_ivt) * odt_skims['WLK_EXP_WLK_KEYIVT']/100,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_EXP_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_EXP_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@c_xwait * odt_skims['WLK_EXP_WLK_XWAIT']/100,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_EXP_WLK_BOARDS']-1).clip(0),-0.0,-0.0
@c_wacc * df.origin_walk_time # (3),-0.23310000000000003,-0.23310000000000003
@c_wegr * df.destination_walk_time # (3),-0.23310000000000003,-0.23310000000000003
@c_waux * odt_skims['WLK_EXP_WLK_WAUX']/100,-0.0,-0.0
@df.c_cost * odt_skims['WLK_EXP_WLK_FAR'],-0.02348634520238116,-0.017633281978008238
@c_density_index * df.density_index # (4),0.005513677669430349,0.005513677669430349
@c_topology_trn * df.trip_topology # (3),-0.038500000000000006,-0.038500000000000006
@c_age010_trn * (df.age <= 10) # (3),0.0,0.0
walk_heavyrail_available == False,1.0,1.0
@c_ivt * odt_skims['WLK_HVY_WLK_TOTIVT']/100,-0.11899999529123306,-0.14000000059604645
@(c_ivt_hvy-c_ivt) * odt_skims['WLK_HVY_WLK_KEYIVT']/100,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_HVY_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_HVY_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@c_xwait * odt_skims['WLK_HVY_WLK_XWAIT']/100,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_HVY_WLK_BOARDS']-1).clip(0),-0.0,-0.0
@c_wacc * df.origin_walk_time # (4),-0.23310000000000003,-0.23310000000000003
@c_wegr * df.destination_walk_time # (4),-0.23310000000000003,-0.23310000000000003
@c_waux * odt_skims['WLK_HVY_WLK_WAUX']/100,-0.0,-0.0
@df.c_cost * odt_skims['WLK_HVY_WLK_FAR'],-0.02348634520238116,-0.017633281978008238
@c_density_index * df.density_index # (5),0.005513677669430349,0.005513677669430349
@c_topology_trn * df.trip_topology # (4),-0.038500000000000006,-0.038500000000000006
@c_age010_trn * (df.age <= 10) # (4),0.0,0.0
walk_commuter_available == False,1.0,1.0
@c_ivt * odt_skims['WLK_COM_WLK_TOTIVT']/100,-0.11899999529123306,-0.14000000059604645
@(c_ivt_com-c_ivt) * odt_skims['WLK_COM_WLK_KEYIVT']/100,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_COM_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_COM_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@c_xwait * odt_skims['WLK_COM_WLK_XWAIT']/100,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_COM_WLK_BOARDS']-1).clip(0),-0.0,-0.0
@c_wacc * df.origin_walk_time # (5),-0.23310000000000003,-0.23310000000000003
@c_wegr * df.destination_walk_time # (5),-0.23310000000000003,-0.23310000000000003
@c_waux * odt_skims['WLK_COM_WLK_WAUX']/100,-0.0,-0.0
@df.c_cost * odt_skims['WLK_COM_WLK_FAR'],-0.02348634520238116,-0.017633281978008238
@c_density_index * df.density_index # (6),0.005513677669430349,0.005513677669430349
@c_topology_trn * df.trip_topology # (5),-0.038500000000000006,-0.038500000000000006
@c_age010_trn * (df.age < 10),0.0,0.0
auto_ownership == 0 # (3),1.0,1.0
age < 16 # (3),1.0,1.0
@c_density_index * df.density_index # (7),0.005513677669430349,0.005513677669430349
@c_topology_trn * df.trip_topology # (6),-0.038500000000000006,-0.038500000000000006
@c_age010_trn * (df.age < 10) # (2),0.0,0.0
outbound & ~drive_local_available_outbound,1.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_LOC_WLK_TOTIVT']/100,-0.11900000000000001,-0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_LOC_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_LOC_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_LOC_WLK_XWAIT']/100,-0.0,-0.0
@df.outbound * c_xfers_wlk * (odt_skims['DRV_LOC_WLK_BOARDS']-1).clip(0),-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_LOC_WLK_DTIM']/100,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time,-0.23310000000000003,-0.0
@df.outbound * c_waux * odt_skims['DRV_LOC_WLK_WAUX']/100,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_LOC_WLK_FAR'] + costPerMile*odt_skims['DRV_LOC_WLK_DDIST']/100),-0.02348634520238116,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_LOC_WLK_DDIST']/100)/ (od_skims['DIST']),0.0,0.0
inbound & ~drive_local_available_inbound,0.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_LOC_DRV_TOTIVT']/100,-0.0,-0.14
@df.inbound * c_short_i_wait * (odt_skims['WLK_LOC_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_LOC_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_LOC_DRV_XWAIT']/100,-0.0,-0.0
@df.inbound * c_xfers_wlk * (odt_skims['WLK_LOC_DRV_BOARDS']-1).clip(0),-0.0,-0.0
@df.inbound * c_dtim * odt_skims['WLK_LOC_DRV_DTIM']/100,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time,-0.0,-0.23310000000000003
@df.inbound * c_waux * odt_skims['WLK_LOC_DRV_WAUX']/100,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_LOC_DRV_FAR'] + costPerMile*odt_skims['WLK_LOC_DRV_DDIST']/100),-0.0,-0.017633281978008238
@df.outbound * c_dacc_ratio * (odt_skims['WLK_LOC_DRV_DDIST']/100)/ (od_skims['DIST']),0.0,0.0
auto_ownership == 0 # (4),1.0,1.0
age < 16 # (4),1.0,1.0
@c_density_index * df.density_index # (8),0.005513677669430349,0.005513677669430349
@c_topology_trn * df.trip_topology # (7),-0.038500000000000006,-0.038500000000000006
@c_age010_trn * (df.age < 10) # (3),0.0,0.0
outbound & ~drive_lrf_available_outbound,1.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_LRF_WLK_TOTIVT']/100,-0.11900000000000001,-0.0
@df.outbound * (c_ivt_lrt-c_ivt)*odt_skims['DRV_LRF_WLK_KEYIVT']/100,0.0,0.0
@df.outbound * (c_ivt_ferry-c_ivt_lrt)*odt_skims['DRV_LRF_WLK_FERRYIVT']/100,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_LRF_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_LRF_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_LRF_WLK_XWAIT']/100,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_LRF_WLK_BOARDS']-1).clip(0),-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_LRF_WLK_DTIM']/100,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (2),-0.23310000000000003,-0.0
@df.outbound * c_waux * odt_skims['DRV_LRF_WLK_WAUX']/100,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_LRF_WLK_FAR'] + costPerMile * odt_skims['DRV_LRF_WLK_DDIST']/100),-0.02348634520238116,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_LRF_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0
inbound & ~drive_lrf_available_inbound,0.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_LRF_DRV_TOTIVT']/100,-0.0,-0.14
@df.inbound * (c_ivt_lrt-c_ivt)*odt_skims['WLK_LRF_DRV_KEYIVT']/100,0.0,0.0
@df.inbound * (c_ivt_ferry-c_ivt_lrt)*odt_skims['WLK_LRF_DRV_FERRYIVT']/100,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_LRF_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_LRF_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_LRF_DRV_XWAIT']/100,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_LRF_DRV_BOARDS']-1).clip(0),-0.0,-0.0
@df.inbound * c_dtim * odt_skims['WLK_LRF_DRV_DTIM']/100,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (2),-0.0,-0.23310000000000003
@df.inbound * c_waux * odt_skims['WLK_LRF_DRV_WAUX']/100,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_LRF_DRV_FAR'] + costPerMile * odt_skims['WLK_LRF_DRV_DDIST']/100),-0.0,-0.017633281978008238
@df.inbound * c_dacc_ratio * (odt_skims['WLK_LRF_DRV_DDIST']/100)/ od_skims['DIST'],0.0,0.0
auto_ownership == 0 # (5),1.0,1.0
age < 16 # (5),1.0,1.0
@c_density_index * df.density_index # (9),0.005513677669430349,0.005513677669430349
@c_topology_trn * df.trip_topology # (8),-0.038500000000000006,-0.038500000000000006
@c_age010_trn * (df.age < 10) # (4),0.0,0.0
outbound & ~drive_express_available_outbound,1.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_EXP_WLK_TOTIVT']/100,-0.11900000000000001,-0.0
@df.outbound * (c_ivt_exp-c_ivt) * odt_skims['DRV_EXP_WLK_KEYIVT']/100,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_EXP_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_EXP_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_EXP_WLK_XWAIT']/100,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_EXP_WLK_BOARDS']-1).clip(0),-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_EXP_WLK_DTIM']/100,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (3),-0.23310000000000003,-0.0
@df.outbound * c_waux * odt_skims['DRV_EXP_WLK_WAUX']/100,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_EXP_WLK_FAR'] + costPerMile * odt_skims['DRV_EXP_WLK_DDIST']/100),-0.02348634520238116,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_EXP_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0
inbound & ~drive_express_available_inbound,0.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_EXP_DRV_TOTIVT']/100,-0.0,-0.14
@df.inbound * (c_ivt_exp-c_ivt) * odt_skims['WLK_EXP_DRV_KEYIVT']/100,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_EXP_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_EXP_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_EXP_DRV_XWAIT']/100,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_EXP_DRV_BOARDS']-1).clip(0),-0.0,-0.0
@df.inbound * c_dtim * odt_skims['WLK_EXP_DRV_DTIM']/100,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (3),-0.0,-0.23310000000000003
@df.inbound * c_waux * odt_skims['WLK_EXP_DRV_WAUX']/100,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_EXP_DRV_FAR'] + costPerMile * odt_skims['WLK_EXP_DRV_DDIST']/100),-0.0,-0.017633281978008238
@df.inbound * c_dacc_ratio * (odt_skims['WLK_EXP_DRV_DDIST']/100) / od_skims['DIST'],0.0,0.0
auto_ownership == 0 # (6),1.0,1.0
age < 16 # (6),1.0,1.0
@c_density_index * df.density_index # (10),0.005513677669430349,0.005513677669430349
@c_topology_trn * df.trip_topology # (9),-0.038500000000000006,-0.038500000000000006
@c_age010_trn * (df.age < 10) # (5),0.0,0.0
outbound & ~drive_heavyrail_available_outbound,1.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_HVY_WLK_TOTIVT']/100,-0.11900000000000001,-0.0
@df.outbound * (c_ivt_hvy-c_ivt) * odt_skims['DRV_HVY_WLK_KEYIVT']/100,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_HVY_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_HVY_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_HVY_WLK_XWAIT']/100,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_HVY_WLK_BOARDS']-1).clip(0),-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_HVY_WLK_DTIM']/100,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (4),-0.23310000000000003,-0.0
@df.outbound * c_waux * odt_skims['DRV_HVY_WLK_WAUX']/100,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_HVY_WLK_FAR'] + costPerMile * odt_skims['DRV_HVY_WLK_DDIST']/100),-0.02348634520238116,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_HVY_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0
inbound & ~drive_heavyrail_available_inbound,0.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_HVY_DRV_TOTIVT']/100,-0.0,-0.14
@df.inbound * (c_ivt_hvy-c_ivt) * odt_skims['WLK_HVY_DRV_KEYIVT']/100,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_HVY_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_HVY_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_HVY_DRV_XWAIT']/100,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_HVY_DRV_BOARDS']-1).clip(0),-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_HVY_WLK_DTIM']/100 # (2),-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (4),-0.0,-0.23310000000000003
@c_waux * odt_skims['WLK_HVY_DRV_WAUX']/100,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_HVY_DRV_FAR'] + costPerMile * odt_skims['WLK_HVY_DRV_DDIST']/100),-0.0,-0.017633281978008238
@df.inbound * c_dacc_ratio * (odt_skims['WLK_HVY_DRV_DDIST']/100)/ od_skims['DIST'],0.0,0.0
auto_ownership == 0 # (7),1.0,1.0
age < 16 # (7),1.0,1.0
@c_density_index * df.density_index # (11),0.005513677669430349,0.005513677669430349
@c_topology_trn * df.trip_topology # (10),-0.038500000000000006,-0.038500000000000006
@c_age010_trn * (df.age < 10) # (6),0.0,0.0
outbound & ~drive_commuter_available_outbound,1.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_COM_WLK_TOTIVT']/100,-0.11900000000000001,-0.0
@df.outbound * (c_ivt_com-c_ivt) * odt_skims['DRV_COM_WLK_KEYIVT']/100,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_COM_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_COM_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_COM_WLK_XWAIT']/100,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_COM_WLK_BOARDS']-1).clip(0),-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_COM_WLK_DTIM']/100,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (5),-0.23310000000000003,-0.0
@df.outbound * c_waux * odt_skims['DRV_COM_WLK_WAUX']/100,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_COM_WLK_FAR'] + costPerMile * odt_skims['DRV_COM_WLK_DDIST']/100),-0.02348634520238116,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_COM_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0
inbound & ~drive_commuter_available_inbound,0.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_COM_DRV_TOTIVT']/100,-0.0,-0.14
@df.inbound * (c_ivt_com-c_ivt) * odt_skims['WLK_COM_DRV_KEYIVT']/100,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_COM_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_COM_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_COM_DRV_XWAIT']/100,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_COM_DRV_BOARDS']-1).clip(0),-0.0,-0.0
@df.inbound * c_dtim * odt_skims['WLK_COM_DRV_DTIM']/100,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (5),-0.0,-0.23310000000000003
@df.inbound * c_waux * odt_skims['WLK_COM_DRV_WAUX']/100,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_COM_DRV_FAR'] + costPerMile * odt_skims['WLK_COM_DRV_DDIST']/100),-0.0,-0.017633281978008238
@df.inbound * c_dacc_ratio * (odt_skims['WLK_COM_DRV_DDIST']/100) / od_skims['DIST'],0.0,0.0
@c_ivt * odt_skims['HOV2TOLL_TIME'] # (2),-0.04103749990463257,-0.045791663229465485
@c_ivt * 1.5 * df.origTaxiWaitTime,-0.144375,-0.24937500000000007
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'],-0.0017285052566223418,-0.0019274627478989624
@df.c_cost * odt_skims['HOV2TOLL_BTOLL'],-0.0,-0.0
@df.c_cost * (Taxi_baseFare + odt_skims['HOV2TOLL_DIST'] * Taxi_costPerMile + odt_skims['HOV2TOLL_TIME'] * Taxi_costPerMinute)*100,-1.1392238891363184,-1.1954463277970386
@c_ivt * odt_skims['HOV2TOLL_TIME'] ,-0.04103749990463257,-0.045791663229465485
@c_ivt * 1.5 * df.origSingleTNCWaitTime,-0.07875000000000001,-0.165375
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] # (2),-0.0017285052566223418,-0.0019274627478989624
@df.c_cost * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']),-0.0,-0.0
"@df.c_cost * np.maximum(TNC_single_baseFare + odt_skims['HOV2TOLL_DIST'] * TNC_single_costPerMile + odt_skims['HOV2TOLL_TIME'] * TNC_single_costPerMinute, TNC_single_costMinimum) * 100",-1.3089768253905467,-1.3089768253905467
@c_ivt * odt_skims['HOV2TOLL_TIME'] * TNC_shared_IVTFactor,-0.06155624985694885,-0.06868749856948853
@c_ivt  * 1.5 * df.origSharedTNCWaitTime,-0.13124999999999998,-0.20999999999999996
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] # (3),-0.0017285052566223418,-0.0019274627478989624
@df.c_cost * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']) # (2),-0.0,-0.0
"@df.c_cost * np.maximum(TNC_shared_baseFare + odt_skims['HOV2TOLL_DIST'] * TNC_shared_costPerMile + odt_skims['HOV2TOLL_TIME']* TNC_shared_costPerMinute, TNC_shared_costMinimum) * 100",-0.6031246513944867,-0.6198811131702904
tour_mode_is_auto,1.0,1.0
tour_mode_is_walk,0.0,0.0
tour_mode_is_bike,0.0,0.0
tour_mode_is_walk_transit,0.0,0.0
tour_mode_is_drive_transit,0.0,0.0
tour_mode_is_ride_hail,0.0,0.0
@sov_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0
@sov_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0
@sov_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),-0.0,-0.0
@sov_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0
@sr2_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),0.8574,0.8574
@sr2_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-999.0,-999.0
@sr2_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-0.5989,-0.5989
@sr2_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-7.0,-7.0
@sr3p_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0
@sr3p_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),0.0,0.0
@sr3p_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),0.0,0.0
@sr3p_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0
@walk_ASC_rh * df.is_indiv * (df.i_tour_mode == I_WALK_MODE),-0.0,-0.0
@bike_ASC_walk * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0
@bike_ASC_rh * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0
@walk_transit_ASC_lightrail * (df.is_indiv & df.tour_mode_is_walk_transit & ~df.walk_ferry_available),0.0,0.0
@walk_transit_ASC_ferry * (df.is_indiv & df.tour_mode_is_walk_transit & df.walk_ferry_available),0.0,0.0
@walk_transit_ASC_express * (df.is_indiv & df.tour_mode_is_walk_transit),0.0,0.0
@walk_transit_ASC_heavyrail * (df.is_indiv & df.tour_mode_is_walk_transit),0.0,0.0
@walk_transit_ASC_commuter * (df.is_indiv & df.tour_mode_is_walk_transit),0.0,0.0
@walk_transit_ASC_sr2 * (df.is_indiv & df.tour_mode_is_walk_transit),-0.0,-0.0
@walk_transit_ASC_sr3p * (df.is_indiv & df.tour_mode_is_walk_transit),-0.0,-0.0
@walk_transit_ASC_walk * (df.is_indiv & df.tour_mode_is_walk_transit),0.0,0.0
@walk_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_walk_transit),-0.0,-0.0
@drive_transit_ASC_lightrail * (df.is_indiv & df.tour_mode_is_drive_transit & ~df.drive_ferry_available),0.0,0.0
@drive_transit_ASC_ferry * (df.is_indiv & df.tour_mode_is_drive_transit & df.drive_ferry_available),0.0,0.0
@drive_transit_ASC_express * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0
@drive_transit_ASC_heavyrail * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0
@drive_transit_ASC_commuter * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0
@drive_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_drive_transit),-0.0,-0.0
@ride_hail_ASC_sr2 * (df.is_indiv & df.tour_mode_is_ride_hail),-0.0,-0.0
@ride_hail_ASC_sr3p * (df.is_indiv & df.tour_mode_is_ride_hail),0.0,0.0
@ride_hail_ASC_walk * (df.is_indiv & df.tour_mode_is_ride_hail),0.0,0.0
@ride_hail_ASC_walk_transit * (df.is_indiv & df.tour_mode_is_ride_hail),0.0,0.0
@ride_hail_ASC_taxi * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),-0.0,-0.0
@ride_hail_ASC_tnc_single * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0
@ride_hail_ASC_tnc_shared * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0
@joint_auto_ASC_sr2 * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),-0.0,-0.0
@joint_auto_ASC_sr3p * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),-0.0,-0.0
@joint_auto_ASC_walk * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),-0.0,-0.0
@joint_auto_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),-0.0,-0.0
@joint_walk_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),-0.0,-0.0
@joint_bike_ASC_walk * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0
@joint_bike_ASC_rh * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0
@joint_walk_transit_ASC_lightrail * (df.is_joint & df.tour_mode_is_walk_transit & ~df.walk_ferry_available),0.0,0.0
@joint_walk_transit_ASC_ferry * (df.is_joint & df.tour_mode_is_walk_transit & df.walk_ferry_available),0.0,0.0
@joint_walk_transit_ASC_express * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_walk_transit_ASC_heavyrail * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_walk_transit_ASC_commuter * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_walk_transit_ASC_sr2 * (df.is_joint & df.tour_mode_is_walk_transit),-0.0,-0.0
@joint_walk_transit_ASC_sr3p * (df.is_joint & df.tour_mode_is_walk_transit),-0.0,-0.0
@joint_walk_transit_ASC_walk * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_walk_transit_ASC_rh * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_drive_transit_ASC_lightrail * (df.is_joint & df.tour_mode_is_drive_transit & ~df.drive_ferry_available),0.0,0.0
@joint_drive_transit_ASC_ferry * (df.is_joint & df.tour_mode_is_drive_transit & df.drive_ferry_available),0.0,0.0
@joint_drive_transit_ASC_express * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0
@joint_drive_transit_ASC_heavyrail * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0
@joint_drive_transit_ASC_commuter * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0
@joint_drive_transit_ASC_rh * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0
@joint_ride_hail_ASC_sr2 * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0
@joint_ride_hail_ASC_sr3p * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0
@joint_ride_hail_ASC_walk * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0
@joint_ride_hail_ASC_walk_transit * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0
@joint_ride_hail_ASC_taxi * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0
@joint_ride_hail_ASC_tnc_single * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),-0.0,-0.0
@joint_ride_hail_ASC_tnc_shared * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0
@df.tour_mode_is_walk & (od_skims['DISTWALK'] > 3),0.0,0.0
@df.tour_mode_is_walk & (od_skims['DISTBIKE'] > 8),0.0,0.0
@(c_origin_density_index*df.origin_density_index).clip(c_origin_density_index_max) if origin_density_applied else 0,0.2625,0.2625
@c_walk_express_penalty * ~(df.first_trip | df.first_trip),-0.0,-0.0
@adjust_tnc_shared,-0.525,-0.525
sov_available == False,0.0,0.0
auto_ownership == 0,1.0,1.0
age < 16,1.0,1.0
is_joint == True,0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV,0.0,0.0
@c_ivt*odt_skims['SOV_TIME'],-0.03735283389687538,-0.034326665103435516
@c_walktimeshort * df.total_terminal_time,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['SOV_DIST'],-0.060717902901899275,-0.05918238449317731
c_cost * total_parking_cost,-0.0,-0.13404188420694965
@df.c_cost * odt_skims['SOV_BTOLL'],-0.0,-0.0
@c_age1619_da * ((df.age >= 16) & (df.age <= 19)),0.0,0.0
sovtoll_available == False,0.0,0.0
auto_ownership == 0 # (2),1.0,1.0
age < 16 # (2),1.0,1.0
is_joint == True # (2),0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV # (2),0.0,0.0
@c_ivt*odt_skims['SOVTOLL_TIME'],-0.03735283389687538,-0.034326665103435516
@c_walktimeshort * df.total_terminal_time # (2),-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['SOVTOLL_DIST'],-0.060717902901899275,-0.05918238449317731
c_cost * total_parking_cost # (2),-0.0,-0.13404188420694965
@df.c_cost * odt_skims['SOVTOLL_BTOLL'],-0.0,-0.0
@df.c_cost * odt_skims['SOVTOLL_VTOLL'],-0.0015789773080143409,-0.0014529189628904567
@c_age1619_da * ((df.age >= 16) & (df.age <= 19)) # (2),0.0,0.0
hov2_available == False,0.0,0.0
is_joint & (number_of_participants > 2),0.0,0.0
@c_ivt * odt_skims['HOV2_TIME'],-0.03735283389687538,-0.034326665103435516
@c_walktimeshort * df.total_terminal_time # (3),-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV2_DIST'],-0.060717902901899275,-0.05918238449317731
@df.c_cost * df.total_parking_cost / costShareSr2,-0.0,-0.07659536240397123
@df.c_cost * odt_skims['HOV2_BTOLL'] / costShareSr2,-0.0,-0.0
@c_hhsize1_sr * (df.hhsize == 1),-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2),0.0,0.0
@c_age16p_sr * (df.age >= 16),0.0,0.0
hov2toll_available == False,0.0,0.0
is_joint & (number_of_participants > 2) # (2),0.0,0.0
@c_ivt * odt_skims['HOV2TOLL_TIME'],-0.03735283389687538,-0.034326665103435516
@c_walktimeshort * df.total_terminal_time # (4),-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV2TOLL_DIST'],-0.060717902901899275,-0.05918238449317731
@df.c_cost * df.total_parking_cost / costShareSr2 # (2),-0.0,-0.07659536240397123
@df.c_cost * odt_skims['HOV2TOLL_BTOLL'] / costShareSr2,-0.0,-0.0
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] / costShareSr2,-0.0009022727474367662,-0.0008302394073659752
@c_hhsize1_sr * (df.hhsize == 1) # (2),-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (2),0.0,0.0
@c_age16p_sr * (df.age >= 16) # (2),0.0,0.0
hov3_available == False,0.0,0.0
@c_ivt * odt_skims['HOV3_TIME'],-0.03735283389687538,-0.034326665103435516
@c_walktimeshort * df.total_terminal_time # (5),-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV3_DIST'],-0.060717902901899275,-0.05918238449317731
@df.c_cost *  df.total_parking_cost / costShareSr3,-0.0,-0.053616753682779864
@df.c_cost * odt_skims['HOV3_BTOLL'] / costShareSr3,-0.0,-0.0
@c_hhsize1_sr * (df.hhsize == 1) # (3),-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (3),0.0,0.0
@c_age16p_sr * (df.age >= 16) # (3),0.0,0.0
hov3toll_available == False,0.0,0.0
@c_ivt * odt_skims['HOV3TOLL_TIME'],-0.03735283389687538,-0.034326665103435516
@c_walktimeshort * df.total_terminal_time # (6),-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV3TOLL_DIST'],-0.060717902901899275,-0.05918238449317731
@df.c_cost * df.total_parking_cost / costShareSr3,-0.0,-0.053616753682779864
@df.c_cost * odt_skims['HOV3TOLL_BTOLL'] / costShareSr3,-0.0,-0.0
@df.c_cost * odt_skims['HOV3TOLL_VTOLL'] / costShareSr3,-0.0006315909232057364,-0.0005811675851561827
@c_hhsize1_sr * (df.hhsize == 1) # (4),-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (4),0.0,0.0
@c_age16p_sr * (df.age >= 16) # (4),0.0,0.0
@c_walktimeshort * od_skims['DISTWALK'].clip(upper=walkThresh) * 60/walkSpeed,-1.0839999914169312,-1.0839999914169312
@c_walktimelong * (od_skims['DISTWALK'] - walkThresh).clip(lower=0) * 60/walkSpeed,-0.9710413813591003,-0.8073450922966003
@c_density_index * df.density_index,0.015925382433649174,0.015925382433649174
@c_topology_walk * df.trip_topology,-0.4065,-0.4065
is_atwork_subtour & ~work_tour_is_bike,0.0,0.0
@c_biketimeshort * od_skims['DISTBIKE'].clip(upper=bikeThresh)*60/bikeSpeed,-0.6391041874885559,-0.6227344870567322
@c_biketimelong * (od_skims['DISTBIKE']-bikeThresh).clip(lower=0)*60/bikeSpeed,-0.0,-0.0
@c_density_index*df.density_index,0.015925382433649174,0.015925382433649174
@c_topology_bike * df.trip_topology,-0.542,-0.542
walk_local_available == False,0.0,0.0
@c_ivt * odt_skims['WLK_LOC_WLK_TOTIVT']/100,-0.5736167430877686,-0.18970000743865967
@c_short_i_wait * (odt_skims['WLK_LOC_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_LOC_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@c_xwait * odt_skims['WLK_LOC_WLK_XWAIT']/100,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_LOC_WLK_BOARDS']-1).clip(0),-0.1354999989271164,-0.1354999989271164
@c_wacc * df.origin_walk_time,-0.360972,-0.360972
@c_wegr * df.destination_walk_time,-0.360972,-0.360972
@c_waux * odt_skims['WLK_LOC_WLK_WAUX']/100,-0.03703666850924492,-0.016259999945759773
@df.c_cost * odt_skims['WLK_LOC_WLK_FAR'],-0.04070860630497374,-0.03335435121742646
@c_density_index * df.density_index # (2),0.015925382433649174,0.015925382433649174
@c_topology_trn * df.trip_topology,-0.05962,-0.05962
@c_age010_trn * (df.age <= 10),0.0,0.0
walk_lrf_available == False,1.0,1.0
@c_ivt * odt_skims['WLK_LRF_WLK_TOTIVT']/100,-0.5736167430877686,-0.18970000743865967
@(c_ivt_lrt-c_ivt) * odt_skims['WLK_LRF_WLK_KEYIVT']/100,0.0,0.0
@(c_ivt_ferry-c_ivt_lrt) * odt_skims['WLK_LRF_WLK_FERRYIVT']/100,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_LRF_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_LRF_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@c_xwait * odt_skims['WLK_LRF_WLK_XWAIT']/100,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_LRF_WLK_BOARDS']-1).clip(0),-0.1354999989271164,-0.1354999989271164
@c_wacc * df.origin_walk_time # (2),-0.360972,-0.360972
@c_wegr * df.destination_walk_time # (2),-0.360972,-0.360972
@c_waux * odt_skims['WLK_LRF_WLK_WAUX']/100,-0.03703666850924492,-0.016259999945759773
@df.c_cost * odt_skims['WLK_LRF_WLK_FAR'],-0.04070860630497374,-0.03335435121742646
@c_density_index * df.density_index # (3),0.015925382433649174,0.015925382433649174
@c_topology_trn * df.trip_topology # (2),-0.05962,-0.05962
@c_age010_trn * (df.age <= 10) # (2),0.0,0.0
walk_express_available == False,1.0,1.0
@c_ivt * odt_skims['WLK_EXP_WLK_TOTIVT']/100,-0.5736167430877686,-0.18970000743865967
@(c_ivt_exp-c_ivt) * odt_skims['WLK_EXP_WLK_KEYIVT']/100,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_EXP_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_EXP_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@c_xwait * odt_skims['WLK_EXP_WLK_XWAIT']/100,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_EXP_WLK_BOARDS']-1).clip(0),-0.1354999989271164,-0.1354999989271164
@c_wacc * df.origin_walk_time # (3),-0.360972,-0.360972
@c_wegr * df.destination_walk_time # (3),-0.360972,-0.360972
@c_waux * odt_skims['WLK_EXP_WLK_WAUX']/100,-0.03703666850924492,-0.016259999945759773
@df.c_cost * odt_skims['WLK_EXP_WLK_FAR'],-0.04070860630497374,-0.03335435121742646
@c_density_index * df.density_index # (4),0.015925382433649174,0.015925382433649174
@c_topology_trn * df.trip_topology # (3),-0.05962,-0.05962
@c_age010_trn * (df.age <= 10) # (3),0.0,0.0
walk_heavyrail_available == False,1.0,1.0
@c_ivt * odt_skims['WLK_HVY_WLK_TOTIVT']/100,-0.5736167430877686,-0.18970000743865967
@(c_ivt_hvy-c_ivt) * odt_skims['WLK_HVY_WLK_KEYIVT']/100,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_HVY_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_HVY_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@c_xwait * odt_skims['WLK_HVY_WLK_XWAIT']/100,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_HVY_WLK_BOARDS']-1).clip(0),-0.1354999989271164,-0.1354999989271164
@c_wacc * df.origin_walk_time # (4),-0.360972,-0.360972
@c_wegr * df.destination_walk_time # (4),-0.360972,-0.360972
@c_waux * odt_skims['WLK_HVY_WLK_WAUX']/100,-0.03703666850924492,-0.016259999945759773
@df.c_cost * odt_skims['WLK_HVY_WLK_FAR'],-0.04070860630497374,-0.03335435121742646
@c_density_index * df.density_index # (5),0.015925382433649174,0.015925382433649174
@c_topology_trn * df.trip_topology # (4),-0.05962,-0.05962
@c_age010_trn * (df.age <= 10) # (4),0.0,0.0
walk_commuter_available == False,1.0,1.0
@c_ivt * odt_skims['WLK_COM_WLK_TOTIVT']/100,-0.5736167430877686,-0.18970000743865967
@(c_ivt_com-c_ivt) * odt_skims['WLK_COM_WLK_KEYIVT']/100,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_COM_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_COM_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@c_xwait * odt_skims['WLK_COM_WLK_XWAIT']/100,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_COM_WLK_BOARDS']-1).clip(0),-0.1354999989271164,-0.1354999989271164
@c_wacc * df.origin_walk_time # (5),-0.360972,-0.360972
@c_wegr * df.destination_walk_time # (5),-0.360972,-0.360972
@c_waux * odt_skims['WLK_COM_WLK_WAUX']/100,-0.03703666850924492,-0.016259999945759773
@df.c_cost * odt_skims['WLK_COM_WLK_FAR'],-0.04070860630497374,-0.03335435121742646
@c_density_index * df.density_index # (6),0.015925382433649174,0.015925382433649174
@c_topology_trn * df.trip_topology # (5),-0.05962,-0.05962
@c_age010_trn * (df.age < 10),0.0,0.0
auto_ownership == 0 # (3),1.0,1.0
age < 16 # (3),1.0,1.0
@c_density_index * df.density_index # (7),0.015925382433649174,0.015925382433649174
@c_topology_trn * df.trip_topology # (6),-0.05962,-0.05962
@c_age010_trn * (df.age < 10) # (2),0.0,0.0
outbound & ~drive_local_available_outbound,1.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_LOC_WLK_TOTIVT']/100,-0.5736166887207031,-0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_LOC_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_LOC_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_LOC_WLK_XWAIT']/100,-0.0,-0.0
@df.outbound * c_xfers_wlk * (odt_skims['DRV_LOC_WLK_BOARDS']-1).clip(0),-0.1355,-0.0
@df.outbound * c_dtim * odt_skims['DRV_LOC_WLK_DTIM']/100,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time,-0.360972,-0.0
@df.outbound * c_waux * odt_skims['DRV_LOC_WLK_WAUX']/100,-0.03703666804504394,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_LOC_WLK_FAR'] + costPerMile*odt_skims['DRV_LOC_WLK_DDIST']/100),-0.04070860630497374,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_LOC_WLK_DDIST']/100)/ (od_skims['DIST']),0.0,0.0
inbound & ~drive_local_available_inbound,0.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_LOC_DRV_TOTIVT']/100,-0.0,-0.18969999999999998
@df.inbound * c_short_i_wait * (odt_skims['WLK_LOC_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_LOC_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_LOC_DRV_XWAIT']/100,-0.0,-0.0
@df.inbound * c_xfers_wlk * (odt_skims['WLK_LOC_DRV_BOARDS']-1).clip(0),-0.0,-0.1355
@df.inbound * c_dtim * odt_skims['WLK_LOC_DRV_DTIM']/100,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time,-0.0,-0.360972
@df.inbound * c_waux * odt_skims['WLK_LOC_DRV_WAUX']/100,-0.0,-0.01626
@df.inbound * df.c_cost * (odt_skims['WLK_LOC_DRV_FAR'] + costPerMile*odt_skims['WLK_LOC_DRV_DDIST']/100),-0.0,-0.03335435121742646
@df.outbound * c_dacc_ratio * (odt_skims['WLK_LOC_DRV_DDIST']/100)/ (od_skims['DIST']),0.0,0.0
auto_ownership == 0 # (4),1.0,1.0
age < 16 # (4),1.0,1.0
@c_density_index * df.density_index # (8),0.015925382433649174,0.015925382433649174
@c_topology_trn * df.trip_topology # (7),-0.05962,-0.05962
@c_age010_trn * (df.age < 10) # (3),0.0,0.0
outbound & ~drive_lrf_available_outbound,1.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_LRF_WLK_TOTIVT']/100,-0.5736166887207031,-0.0
@df.outbound * (c_ivt_lrt-c_ivt)*odt_skims['DRV_LRF_WLK_KEYIVT']/100,0.0,0.0
@df.outbound * (c_ivt_ferry-c_ivt_lrt)*odt_skims['DRV_LRF_WLK_FERRYIVT']/100,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_LRF_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_LRF_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_LRF_WLK_XWAIT']/100,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_LRF_WLK_BOARDS']-1).clip(0),-0.4065,-0.0
@df.outbound * c_dtim * odt_skims['DRV_LRF_WLK_DTIM']/100,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (2),-0.360972,-0.0
@df.outbound * c_waux * odt_skims['DRV_LRF_WLK_WAUX']/100,-0.03703666804504394,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_LRF_WLK_FAR'] + costPerMile * odt_skims['DRV_LRF_WLK_DDIST']/100),-0.04070860630497374,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_LRF_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0
inbound & ~drive_lrf_available_inbound,0.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_LRF_DRV_TOTIVT']/100,-0.0,-0.18969999999999998
@df.inbound * (c_ivt_lrt-c_ivt)*odt_skims['WLK_LRF_DRV_KEYIVT']/100,0.0,0.0
@df.inbound * (c_ivt_ferry-c_ivt_lrt)*odt_skims['WLK_LRF_DRV_FERRYIVT']/100,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_LRF_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_LRF_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_LRF_DRV_XWAIT']/100,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_LRF_DRV_BOARDS']-1).clip(0),-0.0,-0.4065
@df.inbound * c_dtim * odt_skims['WLK_LRF_DRV_DTIM']/100,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (2),-0.0,-0.360972
@df.inbound * c_waux * odt_skims['WLK_LRF_DRV_WAUX']/100,-0.0,-0.01626
@df.inbound * df.c_cost * (odt_skims['WLK_LRF_DRV_FAR'] + costPerMile * odt_skims['WLK_LRF_DRV_DDIST']/100),-0.0,-0.03335435121742646
@df.inbound * c_dacc_ratio * (odt_skims['WLK_LRF_DRV_DDIST']/100)/ od_skims['DIST'],0.0,0.0
auto_ownership == 0 # (5),1.0,1.0
age < 16 # (5),1.0,1.0
@c_density_index * df.density_index # (9),0.015925382433649174,0.015925382433649174
@c_topology_trn * df.trip_topology # (8),-0.05962,-0.05962
@c_age010_trn * (df.age < 10) # (4),0.0,0.0
outbound & ~drive_express_available_outbound,1.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_EXP_WLK_TOTIVT']/100,-0.5736166887207031,-0.0
@df.outbound * (c_ivt_exp-c_ivt) * odt_skims['DRV_EXP_WLK_KEYIVT']/100,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_EXP_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_EXP_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_EXP_WLK_XWAIT']/100,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_EXP_WLK_BOARDS']-1).clip(0),-0.4065,-0.0
@df.outbound * c_dtim * odt_skims['DRV_EXP_WLK_DTIM']/100,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (3),-0.360972,-0.0
@df.outbound * c_waux * odt_skims['DRV_EXP_WLK_WAUX']/100,-0.03703666804504394,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_EXP_WLK_FAR'] + costPerMile * odt_skims['DRV_EXP_WLK_DDIST']/100),-0.04070860630497374,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_EXP_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0
inbound & ~drive_express_available_inbound,0.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_EXP_DRV_TOTIVT']/100,-0.0,-0.18969999999999998
@df.inbound * (c_ivt_exp-c_ivt) * odt_skims['WLK_EXP_DRV_KEYIVT']/100,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_EXP_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_EXP_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_EXP_DRV_XWAIT']/100,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_EXP_DRV_BOARDS']-1).clip(0),-0.0,-0.4065
@df.inbound * c_dtim * odt_skims['WLK_EXP_DRV_DTIM']/100,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (3),-0.0,-0.360972
@df.inbound * c_waux * odt_skims['WLK_EXP_DRV_WAUX']/100,-0.0,-0.01626
@df.inbound * df.c_cost * (odt_skims['WLK_EXP_DRV_FAR'] + costPerMile * odt_skims['WLK_EXP_DRV_DDIST']/100),-0.0,-0.03335435121742646
@df.inbound * c_dacc_ratio * (odt_skims['WLK_EXP_DRV_DDIST']/100) / od_skims['DIST'],0.0,0.0
auto_ownership == 0 # (6),1.0,1.0
age < 16 # (6),1.0,1.0
@c_density_index * df.density_index # (10),0.015925382433649174,0.015925382433649174
@c_topology_trn * df.trip_topology # (9),-0.05962,-0.05962
@c_age010_trn * (df.age < 10) # (5),0.0,0.0
outbound & ~drive_heavyrail_available_outbound,1.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_HVY_WLK_TOTIVT']/100,-0.5736166887207031,-0.0
@df.outbound * (c_ivt_hvy-c_ivt) * odt_skims['DRV_HVY_WLK_KEYIVT']/100,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_HVY_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_HVY_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_HVY_WLK_XWAIT']/100,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_HVY_WLK_BOARDS']-1).clip(0),-0.4065,-0.0
@df.outbound * c_dtim * odt_skims['DRV_HVY_WLK_DTIM']/100,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (4),-0.360972,-0.0
@df.outbound * c_waux * odt_skims['DRV_HVY_WLK_WAUX']/100,-0.03703666804504394,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_HVY_WLK_FAR'] + costPerMile * odt_skims['DRV_HVY_WLK_DDIST']/100),-0.04070860630497374,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_HVY_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0
inbound & ~drive_heavyrail_available_inbound,0.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_HVY_DRV_TOTIVT']/100,-0.0,-0.18969999999999998
@df.inbound * (c_ivt_hvy-c_ivt) * odt_skims['WLK_HVY_DRV_KEYIVT']/100,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_HVY_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_HVY_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_HVY_DRV_XWAIT']/100,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_HVY_DRV_BOARDS']-1).clip(0),-0.0,-0.4065
@df.outbound * c_dtim * odt_skims['DRV_HVY_WLK_DTIM']/100 # (2),-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (4),-0.0,-0.360972
@c_waux * odt_skims['WLK_HVY_DRV_WAUX']/100,-0.03703666850924492,-0.016259999945759773
@df.inbound * df.c_cost * (odt_skims['WLK_HVY_DRV_FAR'] + costPerMile * odt_skims['WLK_HVY_DRV_DDIST']/100),-0.0,-0.03335435121742646
@df.inbound * c_dacc_ratio * (odt_skims['WLK_HVY_DRV_DDIST']/100)/ od_skims['DIST'],0.0,0.0
auto_ownership == 0 # (7),1.0,1.0
age < 16 # (7),1.0,1.0
@c_density_index * df.density_index # (11),0.015925382433649174,0.015925382433649174
@c_topology_trn * df.trip_topology # (10),-0.05962,-0.05962
@c_age010_trn * (df.age < 10) # (6),0.0,0.0
outbound & ~drive_commuter_available_outbound,1.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_COM_WLK_TOTIVT']/100,-0.5736166887207031,-0.0
@df.outbound * (c_ivt_com-c_ivt) * odt_skims['DRV_COM_WLK_KEYIVT']/100,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_COM_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_COM_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_COM_WLK_XWAIT']/100,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_COM_WLK_BOARDS']-1).clip(0),-0.4065,-0.0
@df.outbound * c_dtim * odt_skims['DRV_COM_WLK_DTIM']/100,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (5),-0.360972,-0.0
@df.outbound * c_waux * odt_skims['DRV_COM_WLK_WAUX']/100,-0.03703666804504394,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_COM_WLK_FAR'] + costPerMile * odt_skims['DRV_COM_WLK_DDIST']/100),-0.04070860630497374,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_COM_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0
inbound & ~drive_commuter_available_inbound,0.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_COM_DRV_TOTIVT']/100,-0.0,-0.18969999999999998
@df.inbound * (c_ivt_com-c_ivt) * odt_skims['WLK_COM_DRV_KEYIVT']/100,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_COM_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_COM_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_COM_DRV_XWAIT']/100,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_COM_DRV_BOARDS']-1).clip(0),-0.0,-0.4065
@df.inbound * c_dtim * odt_skims['WLK_COM_DRV_DTIM']/100,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (5),-0.0,-0.360972
@df.inbound * c_waux * odt_skims['WLK_COM_DRV_WAUX']/100,-0.0,-0.01626
@df.inbound * df.c_cost * (odt_skims['WLK_COM_DRV_FAR'] + costPerMile * odt_skims['WLK_COM_DRV_DDIST']/100),-0.0,-0.03335435121742646
@df.inbound * c_dacc_ratio * (odt_skims['WLK_COM_DRV_DDIST']/100) / od_skims['DIST'],0.0,0.0
@c_ivt * odt_skims['HOV2TOLL_TIME'] # (2),-0.03735283389687538,-0.034326665103435516
@c_ivt * 1.5 * df.origTaxiWaitTime,-0.223575,-0.38617500000000005
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'],-0.0015789773080143409,-0.0014529189628904567
@df.c_cost * odt_skims['HOV2TOLL_BTOLL'],-0.0,-0.0
@df.c_cost * (Taxi_baseFare + odt_skims['HOV2TOLL_DIST'] * Taxi_costPerMile + odt_skims['HOV2TOLL_TIME'] * Taxi_costPerMinute)*100,-1.4217177147682838,-1.3992645626304896
@c_ivt * odt_skims['HOV2TOLL_TIME'] ,-0.03735283389687538,-0.034326665103435516
@c_ivt * 1.5 * df.origSingleTNCWaitTime,-0.12195000000000002,-0.25609499999999996
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] # (2),-0.0015789773080143409,-0.0014529189628904567
@df.c_cost * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']),-0.0,-0.0
"@df.c_cost * np.maximum(TNC_single_baseFare + odt_skims['HOV2TOLL_DIST'] * TNC_single_costPerMile + odt_skims['HOV2TOLL_TIME'] * TNC_single_costPerMinute, TNC_single_costMinimum) * 100",-2.0270441124619323,-2.0270441124619323
@c_ivt * odt_skims['HOV2TOLL_TIME'] * TNC_shared_IVTFactor,-0.05602925270795822,-0.051489997655153275
@c_ivt  * 1.5 * df.origSharedTNCWaitTime,-0.20324999999999996,-0.32519999999999993
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] # (3),-0.0015789773080143409,-0.0014529189628904567
@df.c_cost * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']) # (2),-0.0,-0.0
"@df.c_cost * np.maximum(TNC_shared_baseFare + odt_skims['HOV2TOLL_DIST'] * TNC_shared_costPerMile + odt_skims['HOV2TOLL_TIME']* TNC_shared_costPerMinute, TNC_shared_costMinimum) * 100",-0.8446017359001103,-0.8446017359001103
tour_mode_is_auto,0.0,0.0
tour_mode_is_walk,0.0,0.0
tour_mode_is_bike,0.0,0.0
tour_mode_is_walk_transit,1.0,1.0
tour_mode_is_drive_transit,0.0,0.0
tour_mode_is_ride_hail,0.0,0.0
@sov_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0
@sov_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0
@sov_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),-0.0,-0.0
@sov_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),-0.0,-0.0
@sr2_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-0.0,-0.0
@sr2_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),0.0,0.0
@sr2_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-0.0,-0.0
@sr2_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-0.0,-0.0
@sr3p_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0
@sr3p_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0
@sr3p_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0
@sr3p_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0
@walk_ASC_rh * df.is_indiv * (df.i_tour_mode == I_WALK_MODE),-0.0,-0.0
@bike_ASC_walk * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0
@bike_ASC_rh * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0
@walk_transit_ASC_lightrail * (df.is_indiv & df.tour_mode_is_walk_transit & ~df.walk_ferry_available),1.4436,1.4436
@walk_transit_ASC_ferry * (df.is_indiv & df.tour_mode_is_walk_transit & df.walk_ferry_available),0.0,0.0
@walk_transit_ASC_express * (df.is_indiv & df.tour_mode_is_walk_transit),0.3224,0.3224
@walk_transit_ASC_heavyrail * (df.is_indiv & df.tour_mode_is_walk_transit),0.849,0.849
@walk_transit_ASC_commuter * (df.is_indiv & df.tour_mode_is_walk_transit),0.9082,0.9082
@walk_transit_ASC_sr2 * (df.is_indiv & df.tour_mode_is_walk_transit),-4.2961,-4.2961
@walk_transit_ASC_sr3p * (df.is_indiv & df.tour_mode_is_walk_transit),-3.8665,-3.8665
@walk_transit_ASC_walk * (df.is_indiv & df.tour_mode_is_walk_transit),-1.1828,-1.1828
@walk_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_walk_transit),-7.0,-7.0
@drive_transit_ASC_lightrail * (df.is_indiv & df.tour_mode_is_drive_transit & ~df.drive_ferry_available),0.0,0.0
@drive_transit_ASC_ferry * (df.is_indiv & df.tour_mode_is_drive_transit & df.drive_ferry_available),0.0,0.0
@drive_transit_ASC_express * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0
@drive_transit_ASC_heavyrail * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0
@drive_transit_ASC_commuter * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0
@drive_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_drive_transit),-0.0,-0.0
@ride_hail_ASC_sr2 * (df.is_indiv & df.tour_mode_is_ride_hail),-0.0,-0.0
@ride_hail_ASC_sr3p * (df.is_indiv & df.tour_mode_is_ride_hail),-0.0,-0.0
@ride_hail_ASC_walk * (df.is_indiv & df.tour_mode_is_ride_hail),0.0,0.0
@ride_hail_ASC_walk_transit * (df.is_indiv & df.tour_mode_is_ride_hail),0.0,0.0
@ride_hail_ASC_taxi * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),-0.0,-0.0
@ride_hail_ASC_tnc_single * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0
@ride_hail_ASC_tnc_shared * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0
@joint_auto_ASC_sr2 * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),0.0,0.0
@joint_auto_ASC_sr3p * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),0.0,0.0
@joint_auto_ASC_walk * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),0.0,0.0
@joint_auto_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0
@joint_walk_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0
@joint_bike_ASC_walk * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),0.0,0.0
@joint_bike_ASC_rh * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),0.0,0.0
@joint_walk_transit_ASC_lightrail * (df.is_joint & df.tour_mode_is_walk_transit & ~df.walk_ferry_available),0.0,0.0
@joint_walk_transit_ASC_ferry * (df.is_joint & df.tour_mode_is_walk_transit & df.walk_ferry_available),0.0,0.0
@joint_walk_transit_ASC_express * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_walk_transit_ASC_heavyrail * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_walk_transit_ASC_commuter * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_walk_transit_ASC_sr2 * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_walk_transit_ASC_sr3p * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_walk_transit_ASC_walk * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_walk_transit_ASC_rh * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0
@joint_drive_transit_ASC_lightrail * (df.is_joint & df.tour_mode_is_drive_transit & ~df.drive_ferry_available),0.0,0.0
@joint_drive_transit_ASC_ferry * (df.is_joint & df.tour_mode_is_drive_transit & df.drive_ferry_available),0.0,0.0
@joint_drive_transit_ASC_express * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0
@joint_drive_transit_ASC_heavyrail * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0
@joint_drive_transit_ASC_commuter * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0
@joint_drive_transit_ASC_rh * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0
@joint_ride_hail_ASC_sr2 * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0
@joint_ride_hail_ASC_sr3p * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0
@joint_ride_hail_ASC_walk * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0
@joint_ride_hail_ASC_walk_transit * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0
@joint_ride_hail_ASC_taxi * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0
@joint_ride_hail_ASC_tnc_single * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0
@joint_ride_hail_ASC_tnc_shared * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0
@df.tour_mode_is_walk & (od_skims['DISTWALK'] > 3),0.0,0.0
@df.tour_mode_is_walk & (od_skims['DISTBIKE'] > 8),0.0,0.0
@(c_origin_density_index*df.origin_density_index).clip(c_origin_density_index_max) if origin_density_applied else 0,0.0,0.0
@c_walk_express_penalty * ~(df.first_trip | df.first_trip),-0.0,-0.0
@adjust_tnc_shared,-0.813,-0.813
sov_available == False,0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
age < 16,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_joint == True,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt*odt_skims['SOV_TIME'],-0.07315000146627426,-0.1560533344745636,-0.08884333819150925,-0.018773334100842476,-0.014960000291466713,-0.01701333187520504,-0.008433332666754723
@c_walktimeshort * df.total_terminal_time,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['SOV_DIST'],-0.09337599964668135,-0.14862189118119992,-0.0939854101301795,-0.019240651611268516,-0.016752375040925332,-0.019951030564357083,-0.0044715620530744946
c_cost * total_parking_cost,-0.0,-0.11290282479889767,-0.08902421096411556,-0.005948364004879402,-0.005948364004879402,-0.03497563282391424,-0.0016846925317827533
@df.c_cost * odt_skims['SOV_BTOLL'],-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_age1619_da * ((df.age >= 16) & (df.age <= 19)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
sovtoll_available == False,0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0 # (2),1.0,1.0,1.0,1.0,1.0,1.0,1.0
age < 16 # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_joint == True # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_atwork_subtour & ~work_tour_is_SOV # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt*odt_skims['SOVTOLL_TIME'],-0.07315000146627426,-0.1560533344745636,-0.08884333819150925,-0.018773334100842476,-0.014960000291466713,-0.01701333187520504,-0.008433332666754723
@c_walktimeshort * df.total_terminal_time # (2),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['SOVTOLL_DIST'],-0.09337599964668135,-0.14862189118119992,-0.0939854101301795,-0.019240651611268516,-0.016752375040925332,-0.019951030564357083,-0.0044715620530744946
c_cost * total_parking_cost # (2),-0.0,-0.11290282479889767,-0.08902421096411556,-0.005948364004879402,-0.005948364004879402,-0.03497563282391424,-0.0016846925317827533
@df.c_cost * odt_skims['SOVTOLL_BTOLL'],-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['SOVTOLL_VTOLL'],-0.002070240389880752,-0.004388652228079826,-0.0025036834896221744,-0.0005287079734813646,-0.0004220963232624863,-0.00048052649317766293,-0.0002352076855446718
@c_age1619_da * ((df.age >= 16) & (df.age <= 19)) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0
hov2_available == False,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_joint & (number_of_participants > 2),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV2_TIME'],-0.07315000146627426,-0.1560533344745636,-0.08884333819150925,-0.018773334100842476,-0.014960000291466713,-0.01701333187520504,-0.008433332666754723
@c_walktimeshort * df.total_terminal_time # (3),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV2_DIST'],-0.09337599964668135,-0.14862189118119992,-0.0939854101301795,-0.019240651611268516,-0.016752375040925332,-0.019951030564357083,-0.0044715620530744946
@df.c_cost * df.total_parking_cost / costShareSr2,-0.0,-0.06451589988508438,-0.050870977693780316,-0.0033990651456453727,-0.0033990651456453727,-0.019986075899379566,-0.0009626814467330019
@df.c_cost * odt_skims['HOV2_BTOLL'] / costShareSr2,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize1_sr * (df.hhsize == 1),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16),0.0,0.0,0.0,0.0,0.0,0.0,0.0
hov2toll_available == False,0.0,0.0,0.0,0.0,0.0,0.0,0.0
is_joint & (number_of_participants > 2) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV2TOLL_TIME'],-0.07315000146627426,-0.1560533344745636,-0.08884333819150925,-0.018773334100842476,-0.014960000291466713,-0.01701333187520504,-0.008433332666754723
@c_walktimeshort * df.total_terminal_time # (4),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV2TOLL_DIST'],-0.09337599964668135,-0.14862189118119992,-0.0939854101301795,-0.019240651611268516,-0.016752375040925332,-0.019951030564357083,-0.0044715620530744946
@df.c_cost * df.total_parking_cost / costShareSr2 # (2),-0.0,-0.06451589988508438,-0.050870977693780316,-0.0033990651456453727,-0.0033990651456453727,-0.019986075899379566,-0.0009626814467330019
@df.c_cost * odt_skims['HOV2TOLL_BTOLL'] / costShareSr2,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] / costShareSr2,-0.0011829945085032867,-0.002507801273188472,-0.0014306762797840996,-0.0003021188419893512,-0.00024119789900713503,-0.00027458656753009313,-0.00013440439173981246
@c_hhsize1_sr * (df.hhsize == 1) # (2),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0
hov3_available == False,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV3_TIME'],-0.07315000146627426,-0.1560533344745636,-0.08884333819150925,-0.018773334100842476,-0.014960000291466713,-0.01701333187520504,-0.008433332666754723
@c_walktimeshort * df.total_terminal_time # (5),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV3_DIST'],-0.09337599964668135,-0.14862189118119992,-0.0939854101301795,-0.019240651611268516,-0.016752375040925332,-0.019951030564357083,-0.0044715620530744946
@df.c_cost *  df.total_parking_cost / costShareSr3,-0.0,-0.04516112991955907,-0.035609684385646226,-0.0023793456019517607,-0.0023793456019517607,-0.013990253129565696,-0.0006738770127131013
@df.c_cost * odt_skims['HOV3_BTOLL'] / costShareSr3,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize1_sr * (df.hhsize == 1) # (3),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (3),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16) # (3),0.0,0.0,0.0,0.0,0.0,0.0,0.0
hov3toll_available == False,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV3TOLL_TIME'],-0.07315000146627426,-0.1560533344745636,-0.08884333819150925,-0.018773334100842476,-0.014960000291466713,-0.01701333187520504,-0.008433332666754723
@c_walktimeshort * df.total_terminal_time # (6),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * costPerMile * odt_skims['HOV3TOLL_DIST'],-0.09337599964668135,-0.14862189118119992,-0.0939854101301795,-0.019240651611268516,-0.016752375040925332,-0.019951030564357083,-0.0044715620530744946
@df.c_cost * df.total_parking_cost / costShareSr3,-0.0,-0.04516112991955907,-0.035609684385646226,-0.0023793456019517607,-0.0023793456019517607,-0.013990253129565696,-0.0006738770127131013
@df.c_cost * odt_skims['HOV3TOLL_BTOLL'] / costShareSr3,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['HOV3TOLL_VTOLL'] / costShareSr3,-0.0008280961559523007,-0.0017554608912319302,-0.0010014733958488699,-0.00021148318939254586,-0.0001688385293049945,-0.00019221059727106518,-9.408307421786872e-05
@c_hhsize1_sr * (df.hhsize == 1) # (4),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_hhsize2_sr * (df.hhsize == 2) # (4),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_age16p_sr * (df.age >= 16) # (4),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_walktimeshort * od_skims['DISTWALK'].clip(upper=walkThresh) * 60/walkSpeed,-0.8799999356269836,-0.8799999356269836,-0.8799999356269836,-0.6072657704353333,-0.5287317633628845,-0.6296864748001099,-0.14112965762615204
@c_walktimelong * (od_skims['DISTWALK'] - walkThresh).clip(lower=0) * 60/walkSpeed,-10.351652145385742,-20.72037696838379,-10.431649208068848,-0.0,-0.0,-0.0,-0.0
@c_density_index * df.density_index,0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_walk * df.trip_topology,-0.32999999999999996,-0.32999999999999996,-0.32999999999999996,-0.32999999999999996,-0.32999999999999996,-0.32999999999999996,-0.32999999999999996
is_atwork_subtour & ~work_tour_is_bike,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_biketimeshort * od_skims['DISTBIKE'].clip(upper=bikeThresh)*60/bikeSpeed,-1.4751652479171753,-2.512037754058838,-1.4831651449203491,-0.3036328852176666,-0.26436588168144226,-0.31484323740005493,-0.07056482881307602
@c_biketimelong * (od_skims['DISTBIKE']-bikeThresh).clip(lower=0)*60/bikeSpeed,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_density_index*df.density_index,0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_bike * df.trip_topology,-0.43999999999999995,-0.43999999999999995,-0.43999999999999995,-0.43999999999999995,-0.43999999999999995,-0.43999999999999995,-0.43999999999999995
walk_local_available == False,0.0,0.0,0.0,0.0,0.0,0.0,1.0
@c_ivt * odt_skims['WLK_LOC_WLK_TOTIVT']/100,-0.41359999775886536,-0.7443333268165588,-0.3123999834060669,-0.032999999821186066,-0.15583333373069763,-0.0806666687130928,-0.0
@c_short_i_wait * (odt_skims['WLK_LOC_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_LOC_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_LOC_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_LOC_WLK_BOARDS']-1).clip(0),-0.10999999940395355,-0.10999999940395355,-0.10999999940395355,-0.0,-0.0,-0.0,-0.0
@c_wacc * df.origin_walk_time,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997
@c_wegr * df.destination_walk_time,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997
@c_waux * odt_skims['WLK_LOC_WLK_WAUX']/100,-0.02786666713654995,-0.012466666288673878,-0.049133334308862686,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['WLK_LOC_WLK_FAR'],-0.0372318530863901,-0.0346514221839355,-0.028175049949353718,-0.011102322079651604,-0.017123325095682422,-0.009766570142714592,-0.0
@c_density_index * df.density_index # (2),0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_trn * df.trip_topology,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484
@c_age010_trn * (df.age <= 10),0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_lrf_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_LRF_WLK_TOTIVT']/100,-0.41359999775886536,-0.7443333268165588,-0.3123999834060669,-0.032999999821186066,-0.15583333373069763,-0.0806666687130928,-0.0
@(c_ivt_lrt-c_ivt) * odt_skims['WLK_LRF_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(c_ivt_ferry-c_ivt_lrt) * odt_skims['WLK_LRF_WLK_FERRYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_LRF_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_LRF_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_LRF_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_LRF_WLK_BOARDS']-1).clip(0),-0.10999999940395355,-0.10999999940395355,-0.10999999940395355,-0.0,-0.0,-0.0,-0.0
@c_wacc * df.origin_walk_time # (2),-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997
@c_wegr * df.destination_walk_time # (2),-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997
@c_waux * odt_skims['WLK_LRF_WLK_WAUX']/100,-0.02786666713654995,-0.012466666288673878,-0.049133334308862686,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['WLK_LRF_WLK_FAR'],-0.0372318530863901,-0.0346514221839355,-0.028175049949353718,-0.011102322079651604,-0.017123325095682422,-0.009766570142714592,-0.0
@c_density_index * df.density_index # (3),0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_trn * df.trip_topology # (2),-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484
@c_age010_trn * (df.age <= 10) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_express_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_EXP_WLK_TOTIVT']/100,-0.41359999775886536,-0.7443333268165588,-0.3123999834060669,-0.032999999821186066,-0.15583333373069763,-0.0806666687130928,-0.0
@(c_ivt_exp-c_ivt) * odt_skims['WLK_EXP_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_EXP_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_EXP_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_EXP_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_EXP_WLK_BOARDS']-1).clip(0),-0.10999999940395355,-0.10999999940395355,-0.10999999940395355,-0.0,-0.0,-0.0,-0.0
@c_wacc * df.origin_walk_time # (3),-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997
@c_wegr * df.destination_walk_time # (3),-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997
@c_waux * odt_skims['WLK_EXP_WLK_WAUX']/100,-0.02786666713654995,-0.012466666288673878,-0.049133334308862686,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['WLK_EXP_WLK_FAR'],-0.0372318530863901,-0.0346514221839355,-0.028175049949353718,-0.011102322079651604,-0.017123325095682422,-0.009766570142714592,-0.0
@c_density_index * df.density_index # (4),0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_trn * df.trip_topology # (3),-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484
@c_age010_trn * (df.age <= 10) # (3),0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_heavyrail_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_HVY_WLK_TOTIVT']/100,-0.41359999775886536,-0.7443333268165588,-0.3123999834060669,-0.032999999821186066,-0.15583333373069763,-0.0806666687130928,-0.0
@(c_ivt_hvy-c_ivt) * odt_skims['WLK_HVY_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_HVY_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_HVY_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_HVY_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_HVY_WLK_BOARDS']-1).clip(0),-0.10999999940395355,-0.10999999940395355,-0.10999999940395355,-0.0,-0.0,-0.0,-0.0
@c_wacc * df.origin_walk_time # (4),-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997
@c_wegr * df.destination_walk_time # (4),-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997
@c_waux * odt_skims['WLK_HVY_WLK_WAUX']/100,-0.02786666713654995,-0.012466666288673878,-0.049133334308862686,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['WLK_HVY_WLK_FAR'],-0.0372318530863901,-0.0346514221839355,-0.028175049949353718,-0.011102322079651604,-0.017123325095682422,-0.009766570142714592,-0.0
@c_density_index * df.density_index # (5),0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_trn * df.trip_topology # (4),-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484
@c_age010_trn * (df.age <= 10) # (4),0.0,0.0,0.0,0.0,0.0,0.0,0.0
walk_commuter_available == False,1.0,1.0,1.0,1.0,1.0,1.0,1.0
@c_ivt * odt_skims['WLK_COM_WLK_TOTIVT']/100,-0.41359999775886536,-0.7443333268165588,-0.3123999834060669,-0.032999999821186066,-0.15583333373069763,-0.0806666687130928,-0.0
@(c_ivt_com-c_ivt) * odt_skims['WLK_COM_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_short_i_wait * (odt_skims['WLK_COM_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_long_i_wait * (odt_skims['WLK_COM_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xwait * odt_skims['WLK_COM_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@c_xfers_wlk * (odt_skims['WLK_COM_WLK_BOARDS']-1).clip(0),-0.10999999940395355,-0.10999999940395355,-0.10999999940395355,-0.0,-0.0,-0.0,-0.0
@c_wacc * df.origin_walk_time # (5),-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997
@c_wegr * df.destination_walk_time # (5),-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997,-0.29303999999999997
@c_waux * odt_skims['WLK_COM_WLK_WAUX']/100,-0.02786666713654995,-0.012466666288673878,-0.049133334308862686,-0.0,-0.0,-0.0,-0.0
@df.c_cost * odt_skims['WLK_COM_WLK_FAR'],-0.0372318530863901,-0.0346514221839355,-0.028175049949353718,-0.011102322079651604,-0.017123325095682422,-0.009766570142714592,-0.0
@c_density_index * df.density_index # (6),0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_trn * df.trip_topology # (5),-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484
@c_age010_trn * (df.age < 10),0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0 # (3),1.0,1.0,1.0,1.0,1.0,1.0,1.0
age < 16 # (3),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_density_index * df.density_index # (7),0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_trn * df.trip_topology # (6),-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484
@c_age010_trn * (df.age < 10) # (2),0.0,0.0,0.0,0.0,0.0,0.0,0.0
outbound & ~drive_local_available_outbound,1.0,0.0,0.0,1.0,1.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_LOC_WLK_TOTIVT']/100,-0.41359999999999997,-0.0,-0.0,-0.033,-0.15583332885742185,-0.0,-0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_LOC_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_LOC_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_LOC_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_wlk * (odt_skims['DRV_LOC_WLK_BOARDS']-1).clip(0),-0.10999999999999999,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_LOC_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time,-0.29303999999999997,-0.0,-0.0,-0.29303999999999997,-0.29303999999999997,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_LOC_WLK_WAUX']/100,-0.02786666610717773,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_LOC_WLK_FAR'] + costPerMile*odt_skims['DRV_LOC_WLK_DDIST']/100),-0.0372318530863901,-0.0,-0.0,-0.011102322079651604,-0.017123325095682422,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_LOC_WLK_DDIST']/100)/ (od_skims['DIST']),0.0,0.0,0.0,0.0,0.0,0.0,0.0
inbound & ~drive_local_available_inbound,0.0,1.0,1.0,0.0,0.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_LOC_DRV_TOTIVT']/100,-0.0,-0.7443333154296874,-0.3124,-0.0,-0.0,-0.08066666442871094,-0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_LOC_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_LOC_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_LOC_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_wlk * (odt_skims['WLK_LOC_DRV_BOARDS']-1).clip(0),-0.0,-0.10999999999999999,-0.10999999999999999,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_dtim * odt_skims['WLK_LOC_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time,-0.0,-0.29303999999999997,-0.29303999999999997,-0.0,-0.0,-0.29303999999999997,-0.29303999999999997
@df.inbound * c_waux * odt_skims['WLK_LOC_DRV_WAUX']/100,-0.0,-0.012466666946411131,-0.04913333221435547,-0.0,-0.0,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_LOC_DRV_FAR'] + costPerMile*odt_skims['WLK_LOC_DRV_DDIST']/100),-0.0,-0.0346514221839355,-0.028175049949353718,-0.0,-0.0,-0.009766570142714592,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['WLK_LOC_DRV_DDIST']/100)/ (od_skims['DIST']),0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0 # (4),1.0,1.0,1.0,1.0,1.0,1.0,1.0
age < 16 # (4),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_density_index * df.density_index # (8),0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_trn * df.trip_topology # (7),-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484
@c_age010_trn * (df.age < 10) # (3),0.0,0.0,0.0,0.0,0.0,0.0,0.0
outbound & ~drive_lrf_available_outbound,1.0,0.0,0.0,1.0,1.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_LRF_WLK_TOTIVT']/100,-0.41359999999999997,-0.0,-0.0,-0.033,-0.15583332885742185,-0.0,-0.0
@df.outbound * (c_ivt_lrt-c_ivt)*odt_skims['DRV_LRF_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * (c_ivt_ferry-c_ivt_lrt)*odt_skims['DRV_LRF_WLK_FERRYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_LRF_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_LRF_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_LRF_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_LRF_WLK_BOARDS']-1).clip(0),-0.32999999999999996,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_LRF_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (2),-0.29303999999999997,-0.0,-0.0,-0.29303999999999997,-0.29303999999999997,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_LRF_WLK_WAUX']/100,-0.02786666610717773,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_LRF_WLK_FAR'] + costPerMile * odt_skims['DRV_LRF_WLK_DDIST']/100),-0.0372318530863901,-0.0,-0.0,-0.011102322079651604,-0.017123325095682422,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_LRF_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0
inbound & ~drive_lrf_available_inbound,0.0,1.0,1.0,0.0,0.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_LRF_DRV_TOTIVT']/100,-0.0,-0.7443333154296874,-0.3124,-0.0,-0.0,-0.08066666442871094,-0.0
@df.inbound * (c_ivt_lrt-c_ivt)*odt_skims['WLK_LRF_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.inbound * (c_ivt_ferry-c_ivt_lrt)*odt_skims['WLK_LRF_DRV_FERRYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_LRF_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_LRF_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_LRF_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_LRF_DRV_BOARDS']-1).clip(0),-0.0,-0.32999999999999996,-0.32999999999999996,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_dtim * odt_skims['WLK_LRF_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (2),-0.0,-0.29303999999999997,-0.29303999999999997,-0.0,-0.0,-0.29303999999999997,-0.29303999999999997
@df.inbound * c_waux * odt_skims['WLK_LRF_DRV_WAUX']/100,-0.0,-0.012466666946411131,-0.04913333221435547,-0.0,-0.0,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_LRF_DRV_FAR'] + costPerMile * odt_skims['WLK_LRF_DRV_DDIST']/100),-0.0,-0.0346514221839355,-0.028175049949353718,-0.0,-0.0,-0.009766570142714592,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_LRF_DRV_DDIST']/100)/ od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0 # (5),1.0,1.0,1.0,1.0,1.0,1.0,1.0
age < 16 # (5),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_density_index * df.density_index # (9),0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_trn * df.trip_topology # (8),-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484
@c_age010_trn * (df.age < 10) # (4),0.0,0.0,0.0,0.0,0.0,0.0,0.0
outbound & ~drive_express_available_outbound,1.0,0.0,0.0,1.0,1.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_EXP_WLK_TOTIVT']/100,-0.41359999999999997,-0.0,-0.0,-0.033,-0.15583332885742185,-0.0,-0.0
@df.outbound * (c_ivt_exp-c_ivt) * odt_skims['DRV_EXP_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_EXP_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_EXP_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_EXP_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_EXP_WLK_BOARDS']-1).clip(0),-0.32999999999999996,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_EXP_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (3),-0.29303999999999997,-0.0,-0.0,-0.29303999999999997,-0.29303999999999997,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_EXP_WLK_WAUX']/100,-0.02786666610717773,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_EXP_WLK_FAR'] + costPerMile * odt_skims['DRV_EXP_WLK_DDIST']/100),-0.0372318530863901,-0.0,-0.0,-0.011102322079651604,-0.017123325095682422,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_EXP_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0
inbound & ~drive_express_available_inbound,0.0,1.0,1.0,0.0,0.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_EXP_DRV_TOTIVT']/100,-0.0,-0.7443333154296874,-0.3124,-0.0,-0.0,-0.08066666442871094,-0.0
@df.inbound * (c_ivt_exp-c_ivt) * odt_skims['WLK_EXP_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_EXP_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_EXP_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_EXP_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_EXP_DRV_BOARDS']-1).clip(0),-0.0,-0.32999999999999996,-0.32999999999999996,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_dtim * odt_skims['WLK_EXP_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (3),-0.0,-0.29303999999999997,-0.29303999999999997,-0.0,-0.0,-0.29303999999999997,-0.29303999999999997
@df.inbound * c_waux * odt_skims['WLK_EXP_DRV_WAUX']/100,-0.0,-0.012466666946411131,-0.04913333221435547,-0.0,-0.0,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_EXP_DRV_FAR'] + costPerMile * odt_skims['WLK_EXP_DRV_DDIST']/100),-0.0,-0.0346514221839355,-0.028175049949353718,-0.0,-0.0,-0.009766570142714592,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_EXP_DRV_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0 # (6),1.0,1.0,1.0,1.0,1.0,1.0,1.0
age < 16 # (6),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_density_index * df.density_index # (10),0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_trn * df.trip_topology # (9),-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484
@c_age010_trn * (df.age < 10) # (5),0.0,0.0,0.0,0.0,0.0,0.0,0.0
outbound & ~drive_heavyrail_available_outbound,1.0,0.0,0.0,1.0,1.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_HVY_WLK_TOTIVT']/100,-0.41359999999999997,-0.0,-0.0,-0.033,-0.15583332885742185,-0.0,-0.0
@df.outbound * (c_ivt_hvy-c_ivt) * odt_skims['DRV_HVY_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_HVY_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_HVY_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_HVY_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_HVY_WLK_BOARDS']-1).clip(0),-0.32999999999999996,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_HVY_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (4),-0.29303999999999997,-0.0,-0.0,-0.29303999999999997,-0.29303999999999997,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_HVY_WLK_WAUX']/100,-0.02786666610717773,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_HVY_WLK_FAR'] + costPerMile * odt_skims['DRV_HVY_WLK_DDIST']/100),-0.0372318530863901,-0.0,-0.0,-0.011102322079651604,-0.017123325095682422,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_HVY_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0
inbound & ~drive_heavyrail_available_inbound,0.0,1.0,1.0,0.0,0.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_HVY_DRV_TOTIVT']/100,-0.0,-0.7443333154296874,-0.3124,-0.0,-0.0,-0.08066666442871094,-0.0
@df.inbound * (c_ivt_hvy-c_ivt) * odt_skims['WLK_HVY_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_HVY_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_HVY_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_HVY_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_HVY_DRV_BOARDS']-1).clip(0),-0.0,-0.32999999999999996,-0.32999999999999996,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_HVY_WLK_DTIM']/100 # (2),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (4),-0.0,-0.29303999999999997,-0.29303999999999997,-0.0,-0.0,-0.29303999999999997,-0.29303999999999997
@c_waux * odt_skims['WLK_HVY_DRV_WAUX']/100,-0.02786666713654995,-0.012466666288673878,-0.049133334308862686,-0.0,-0.0,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_HVY_DRV_FAR'] + costPerMile * odt_skims['WLK_HVY_DRV_DDIST']/100),-0.0,-0.0346514221839355,-0.028175049949353718,-0.0,-0.0,-0.009766570142714592,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_HVY_DRV_DDIST']/100)/ od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0
auto_ownership == 0 # (7),1.0,1.0,1.0,1.0,1.0,1.0,1.0
age < 16 # (7),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_density_index * df.density_index # (11),0.005009152563267715,0.005009152563267715,0.0684021352446201,0.004026274740766039,0.00990074796638378,0.00990074796638378,0.0030188673810897793
@c_topology_trn * df.trip_topology # (10),-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484,-0.0484
@c_age010_trn * (df.age < 10) # (6),0.0,0.0,0.0,0.0,0.0,0.0,0.0
outbound & ~drive_commuter_available_outbound,1.0,0.0,0.0,1.0,1.0,0.0,0.0
@df.outbound * c_ivt * odt_skims['DRV_COM_WLK_TOTIVT']/100,-0.41359999999999997,-0.0,-0.0,-0.033,-0.15583332885742185,-0.0,-0.0
@df.outbound * (c_ivt_com-c_ivt) * odt_skims['DRV_COM_WLK_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.outbound * c_short_i_wait * (odt_skims['DRV_COM_WLK_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_long_i_wait * (odt_skims['DRV_COM_WLK_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xwait * odt_skims['DRV_COM_WLK_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_xfers_drv * (odt_skims['DRV_COM_WLK_BOARDS']-1).clip(0),-0.32999999999999996,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_dtim * odt_skims['DRV_COM_WLK_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * c_wegr * df.destination_walk_time # (5),-0.29303999999999997,-0.0,-0.0,-0.29303999999999997,-0.29303999999999997,-0.0,-0.0
@df.outbound * c_waux * odt_skims['DRV_COM_WLK_WAUX']/100,-0.02786666610717773,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.outbound * df.c_cost * (odt_skims['DRV_COM_WLK_FAR'] + costPerMile * odt_skims['DRV_COM_WLK_DDIST']/100),-0.0372318530863901,-0.0,-0.0,-0.011102322079651604,-0.017123325095682422,-0.0,-0.0
@df.outbound * c_dacc_ratio * (odt_skims['DRV_COM_WLK_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0
inbound & ~drive_commuter_available_inbound,0.0,1.0,1.0,0.0,0.0,1.0,1.0
@df.inbound * c_ivt * odt_skims['WLK_COM_DRV_TOTIVT']/100,-0.0,-0.7443333154296874,-0.3124,-0.0,-0.0,-0.08066666442871094,-0.0
@df.inbound * (c_ivt_com-c_ivt) * odt_skims['WLK_COM_DRV_KEYIVT']/100,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.inbound * c_short_i_wait * (odt_skims['WLK_COM_DRV_IWAIT']/100).clip(upper=waitThresh),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_long_i_wait * (odt_skims['WLK_COM_DRV_IWAIT']/100-waitThresh).clip(0),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xwait * odt_skims['WLK_COM_DRV_XWAIT']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_xfers_drv * (odt_skims['WLK_COM_DRV_BOARDS']-1).clip(0),-0.0,-0.32999999999999996,-0.32999999999999996,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_dtim * odt_skims['WLK_COM_DRV_DTIM']/100,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.inbound * c_wacc * df.origin_walk_time # (5),-0.0,-0.29303999999999997,-0.29303999999999997,-0.0,-0.0,-0.29303999999999997,-0.29303999999999997
@df.inbound * c_waux * odt_skims['WLK_COM_DRV_WAUX']/100,-0.0,-0.012466666946411131,-0.04913333221435547,-0.0,-0.0,-0.0,-0.0
@df.inbound * df.c_cost * (odt_skims['WLK_COM_DRV_FAR'] + costPerMile * odt_skims['WLK_COM_DRV_DDIST']/100),-0.0,-0.0346514221839355,-0.028175049949353718,-0.0,-0.0,-0.009766570142714592,-0.0
@df.inbound * c_dacc_ratio * (odt_skims['WLK_COM_DRV_DDIST']/100) / od_skims['DIST'],0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_ivt * odt_skims['HOV2TOLL_TIME'] # (2),-0.07315000146627426,-0.1560533344745636,-0.08884333819150925,-0.018773334100842476,-0.014960000291466713,-0.01701333187520504,-0.008433332666754723
@c_ivt * 1.5 * df.origTaxiWaitTime,-0.1815,-0.31350000000000006,-0.1815,-0.1815,-0.31350000000000006,-0.31350000000000006,-0.4389000000000001
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'],-0.002070240389880752,-0.004388652228079826,-0.0025036834896221744,-0.0005287079734813646,-0.0004220963232624863,-0.00048052649317766293,-0.0002352076855446718
@df.c_cost * odt_skims['HOV2TOLL_BTOLL'],-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@df.c_cost * (Taxi_baseFare + odt_skims['HOV2TOLL_DIST'] * Taxi_costPerMile + odt_skims['HOV2TOLL_TIME'] * Taxi_costPerMinute)*100,-1.5602839419962389,-2.312456636437105,-1.5788215746277614,-0.5903396413275973,-0.5564067672097349,-0.5980532358954509,-0.39745089250282023
@c_ivt * odt_skims['HOV2TOLL_TIME'] ,-0.07315000146627426,-0.1560533344745636,-0.08884333819150925,-0.018773334100842476,-0.014960000291466713,-0.01701333187520504,-0.008433332666754723
@c_ivt * 1.5 * df.origSingleTNCWaitTime,-0.09900000000000002,-0.20789999999999997,-0.09900000000000002,-0.09900000000000002,-0.20789999999999997,-0.20789999999999997,-0.2772
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] # (2),-0.002070240389880752,-0.004388652228079826,-0.0025036834896221744,-0.0005287079734813646,-0.0004220963232624863,-0.00048052649317766293,-0.0002352076855446718
@df.c_cost * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
"@df.c_cost * np.maximum(TNC_single_baseFare + odt_skims['HOV2TOLL_DIST'] * TNC_single_costPerMile + odt_skims['HOV2TOLL_TIME'] * TNC_single_costPerMinute, TNC_single_costMinimum) * 100",-1.1360320246922528,-1.6756356731165836,-1.1665619834889804,-1.0975957677589077,-1.0975957677589077,-1.0975957677589077,-1.0975957677589077
@c_ivt * odt_skims['HOV2TOLL_TIME'] * TNC_shared_IVTFactor,-0.1097249984741211,-0.2340800017118454,-0.13326500356197357,-0.02816000208258629,-0.022440001368522644,-0.025519996881484985,-0.012649999000132084
@c_ivt  * 1.5 * df.origSharedTNCWaitTime,-0.16499999999999998,-0.26399999999999996,-0.16499999999999998,-0.16499999999999998,-0.26399999999999996,-0.26399999999999996,-0.3630000000000001
@df.c_cost * odt_skims['HOV2TOLL_VTOLL'] # (3),-0.002070240389880752,-0.004388652228079826,-0.0025036834896221744,-0.0005287079734813646,-0.0004220963232624863,-0.00048052649317766293,-0.0002352076855446718
@df.c_cost * (odt_skims['HOV2TOLL_BTOLL'] + dot_skims['HOV2TOLL_BTOLL']) # (2),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
"@df.c_cost * np.maximum(TNC_shared_baseFare + odt_skims['HOV2TOLL_DIST'] * TNC_shared_costPerMile + odt_skims['HOV2TOLL_TIME']* TNC_shared_costPerMinute, TNC_shared_costMinimum) * 100",-0.6566451521435003,-0.8741802948823328,-0.6692853722764132,-0.45733158201469437,-0.45733158201469437,-0.45733158201469437,-0.45733158201469437
tour_mode_is_auto,0.0,0.0,0.0,0.0,0.0,0.0,0.0
tour_mode_is_walk,0.0,0.0,0.0,0.0,0.0,0.0,0.0
tour_mode_is_bike,0.0,0.0,0.0,0.0,0.0,0.0,0.0
tour_mode_is_walk_transit,0.0,0.0,0.0,1.0,1.0,1.0,1.0
tour_mode_is_drive_transit,0.0,0.0,0.0,0.0,0.0,0.0,0.0
tour_mode_is_ride_hail,1.0,1.0,1.0,0.0,0.0,0.0,0.0
@sov_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@sov_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@sov_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@sov_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@sr2_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@sr2_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@sr2_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@sr2_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@sr3p_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@sr3p_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@sr3p_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@sr3p_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@walk_ASC_rh * df.is_indiv * (df.i_tour_mode == I_WALK_MODE),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@bike_ASC_walk * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@bike_ASC_rh * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@walk_transit_ASC_lightrail * (df.is_indiv & df.tour_mode_is_walk_transit & ~df.walk_ferry_available),0.0,0.0,0.0,0.4621,0.4621,0.4621,0.4621
@walk_transit_ASC_ferry * (df.is_indiv & df.tour_mode_is_walk_transit & df.walk_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@walk_transit_ASC_express * (df.is_indiv & df.tour_mode_is_walk_transit),-0.0,-0.0,-0.0,-0.3554,-0.3554,-0.3554,-0.3554
@walk_transit_ASC_heavyrail * (df.is_indiv & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.3538,0.3538,0.3538,0.3538
@walk_transit_ASC_commuter * (df.is_indiv & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.4012,0.4012,0.4012,0.4012
@walk_transit_ASC_sr2 * (df.is_indiv & df.tour_mode_is_walk_transit),-0.0,-0.0,-0.0,-3.6631,-3.6631,-3.6631,-3.6631
@walk_transit_ASC_sr3p * (df.is_indiv & df.tour_mode_is_walk_transit),-0.0,-0.0,-0.0,-4.1314,-4.1314,-4.1314,-4.1314
@walk_transit_ASC_walk * (df.is_indiv & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.4432,0.4432,0.4432,0.4432
@walk_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_walk_transit),-0.0,-0.0,-0.0,-3.7408,-3.7408,-3.7408,-3.7408
@drive_transit_ASC_lightrail * (df.is_indiv & df.tour_mode_is_drive_transit & ~df.drive_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@drive_transit_ASC_ferry * (df.is_indiv & df.tour_mode_is_drive_transit & df.drive_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@drive_transit_ASC_express * (df.is_indiv & df.tour_mode_is_drive_transit),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@drive_transit_ASC_heavyrail * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@drive_transit_ASC_commuter * (df.is_indiv & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@drive_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_drive_transit),-0.0,-0.0,-0.0,-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_sr2 * (df.is_indiv & df.tour_mode_is_ride_hail),-6.108,-6.108,-6.108,-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_sr3p * (df.is_indiv & df.tour_mode_is_ride_hail),-7.0,-7.0,-7.0,0.0,0.0,0.0,0.0
@ride_hail_ASC_walk * (df.is_indiv & df.tour_mode_is_ride_hail),0.2858,0.2858,0.2858,0.0,0.0,0.0,0.0
@ride_hail_ASC_walk_transit * (df.is_indiv & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@ride_hail_ASC_taxi * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),-2.385,-2.385,-2.385,-0.0,-0.0,-0.0,-0.0
@ride_hail_ASC_tnc_single * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.735,0.735,0.735,0.0,0.0,0.0,0.0
@ride_hail_ASC_tnc_shared * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_auto_ASC_sr2 * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_auto_ASC_sr3p * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_auto_ASC_walk * (df.is_joint & df.i_tour_mode.isin(I_AUTO_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_auto_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_bike_ASC_walk * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_bike_ASC_rh * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_lightrail * (df.is_joint & df.tour_mode_is_walk_transit & ~df.walk_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_ferry * (df.is_joint & df.tour_mode_is_walk_transit & df.walk_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_express * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_heavyrail * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_commuter * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_sr2 * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_sr3p * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_walk * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_walk_transit_ASC_rh * (df.is_joint & df.tour_mode_is_walk_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_lightrail * (df.is_joint & df.tour_mode_is_drive_transit & ~df.drive_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_ferry * (df.is_joint & df.tour_mode_is_drive_transit & df.drive_ferry_available),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_express * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_heavyrail * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_commuter * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_drive_transit_ASC_rh * (df.is_joint & df.tour_mode_is_drive_transit),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_sr2 * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_sr3p * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_walk * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_walk_transit * (df.is_joint & df.tour_mode_is_ride_hail),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_taxi * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_tnc_single * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@joint_ride_hail_ASC_tnc_shared * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.tour_mode_is_walk & (od_skims['DISTWALK'] > 3),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@df.tour_mode_is_walk & (od_skims['DISTBIKE'] > 8),0.0,0.0,0.0,0.0,0.0,0.0,0.0
@(c_origin_density_index*df.origin_density_index).clip(c_origin_density_index_max) if origin_density_applied else 0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
@c_walk_express_penalty * ~(df.first_trip | df.first_trip),-0.0,-0.0,-0.21999999999999997,-0.0,-0.21999999999999997,-0.0,-0.21999999999999997
@adjust_tnc_shared,-0.6599999999999999,-0.6599999999999999,-0.6599999999999999,-0.6599999999999999,-0.6599999999999999,-0.6599999999999999,-0.6599999999999999
